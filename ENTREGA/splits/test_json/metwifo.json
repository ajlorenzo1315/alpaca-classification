{
    "TÃ­tulo": "\nP6 C Coding Standards \n",
    "Cuerpo": "It should also be noted that code reviews are intended to be part of our development methodology, and code is expected to conform to these standards to pass review. This should be of the form: #ifndef lint static char\t*rcsid = \"$Header: /u/g/l/glew/public/html/RCS/coding-standards.html,v 1.2 1995/06/22 08:43:54 glew Exp $\"; #endif In the case of header files, the form (for a header file called chapeau.h ) should be: #ifndef lint static char\t*rcsid_chapeau_h = \"$Header: /u/g/l/glew/public/html/RCS/coding-standards.html,v 1.2 1995/06/22 08:43:54 glew Exp $\"; #endif &ltoverview> This section is a (block) comment that should contain a general overview of the file's contents. Simple Statements For the purpose of the ensuing discussions, we wish to define what we mean by a \"simple\" statement. The following is not acceptable: if ( condition1 ) if ( condition2 ) simple_then_statement ;\t/* WRONG */ else simple_else_statement ; It is better to use either if ( condition1 ) { if ( condition2 ) simple_then_statement ; } else { simple_else_statement ; } or if ( condition1 ) { if ( condition2 ) { simple_then_statement ; } else { simple_else_statement ; } } (Depending upon what was intended.) In general, the use of compound statements {} is encouraged as an aid to readability and maintainability. */ statements ; } or while (1) { statements ; } If there is only a single, simple statement to be executed, the brackets {} are not required but are encouraged. In these cases, although the brackets are not required they are strongly recommended as an aid to maintainability. * This section is necessary only if there is something more meaningful to be said * about the parameters that is not contained in their comments. If a function is specified as void , it should never be used as an expression. If a function is specified with an explicit return type, it should never be used as a statement. and \" -> \"). Comments that refer to code that follows the comment should be at the same indentation level as the code that follows. /******************************************************************************/ or /**************************** VARIABLE DECLARATIONS ***************************/ or /***********************/ While it is true that usage of the form: c = char_ptr++; may be reasonable, usage of the form: c = (char1_ptr - char2_ptr); is a bad idea at best. In all cases, code should be written to be as readable and understandable as possible to someone with a moderate understanding of C and programming, and a reasonable understanding of the program in question. It should be followed immediately in the comment (on the same line) with one of the keywords incomplete , untested , or wrong , to indicate its type along with a more descriptive comment if appropriate. When necessary, it is recommended that it be localized in header files and a separate \"machine-dependent\" code file. If it is, * \"*index_p\" will be changed to refer to the appropriate element in the cache and * TRUE will be returned. If not, \"*index_p\" will be modified to refer to the * element in the cache to be replaced and FALSE will be returned. These routines are available in the p6 library, and should be * used as general replacements to malloc and family.",
    "ground_truth": "unknown"
}