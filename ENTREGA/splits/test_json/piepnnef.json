{
    "TÃ­tulo": "OSA Tutorial",
    "Cuerpo": "Date: Tue, 14 Jan 1997 20:09:02 GMT Server: NCSA/1.5 Content-type: text/html Last-modified: Wed, 05 Jun 1996 21:29:31 GMT Content-length: 14548 OSA Tutorial An OSA Tutorial by Paul Black (p.black@ieee.org) Lei Cao (caol@bert.cs.byu.edu) Brent Goodman (mbg@byu.edu) Ben Nielson (nielson@cs.byu.edu) Lu Pan (pan@math.byu.edu) Amalia Parra (parra@bert.cs.byu.edu) Barry Roberts (barry@bert.cs.byu.edu) Sean Rohead (rohead@bert.cs.byu.edu) Roger Smith (rsmith@bert.cs.byu.edu) Mike Steed (mrs@bert.cs.byu.edu) Wei Wei (weiwei@bert.cs.byu.edu) Mingkang Xu (xmk@osm7.cs.byu.edu) How to use this hyper-document This is a hyper-text tutorial and reference manual for OSA , an Object-oriented Systems Analysis technique. The objective of this tutorial is for you to learn what OSA is, how to use OSA to model the real world, and why using OSA can lead to better systems. indicates the formal basis underlying the OSA model. indicates that the concepts are somewhat tentative, that is, that the developers are not happy with it and it is likely to change. indicates comparisons with other systems analysis techniques and object-oriented languages. It has the expressive power to represent reality. Its underlying concepts are based on formal definitions of system data and behavior modeling. It is also difficult for process-oriented analysis to map concepts between a network of processes and objects existing in a real-world system. In addition, this approach also organizes all knowledge about each system object in a single logical location in the analysis document. Thus, information about a system object is easier to locate in object-oriented analysis than in other analysis methods. A model-driven technique, on the other hand, provides a prespecified set of fundamental concepts with which to model the system under study. Thus, OSA encourages analysts to represent systems the way they are perceived, without being constrained by how it will be implemented. Formal Basis The underlying concepts of OSA are based on formal definitions of system data and behavior modeling. 1) Models based on formal definitions can provide a foundation for testing model integrity, and completeness of analysis. ORM - Object-Relationship Model The ORM (Object-Relationship Model) is a way to describe or represent objects, classes of object, relationships between objects and classes, and memberships of the real world. The ORM consists of: Objects , Object Classes , Lexical Object Classes Relational Object Classes High-Level Object Classes Relationships , Relationship Sets , and the special forms, Generalization/Specialization Roles Aggregation Association Constraints , Participation Constraints Co-occurrence Constraints Object-class Cardinality Constraints Specialization Constraints General Constraints High-Level Relationship Sets , and Notes . It is a means of explaining an object's possible states (informally, what it may do) and how and why it changes state. The OBM may be thought of as detailing when and how objects join and leave object classes and relationships. References This section gives references which may be helpful while reading OSA models or using OSA to build models. Symbolary The symbolary is a list of the symbols used in the graphical representation of OSA diagrams.",
    "ground_truth": "unknown"
}