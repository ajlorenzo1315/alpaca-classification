{
    "TÃ­tulo": "Homework 4",
    "Cuerpo": "For example, the MIPS architecture does not have condition codes, yet it has SET instructions that put the result of a comparison into a general purpose register. Dig up all the technical information you can and try to come to terms with the real differences. In superscalar RISC processors that cost is effectively multiplied by the number of instructions that execute simultaneously. Some old architectures had SKIP instructions that were used extensively. It seems that SKIP instructions (possibly with restrictions on what could be skipped) could give conditional execution without breaking the pipeline through the use of SQUASH or KILL hardware already in place due to the needs of exception processing. Study whether the number of cases where SKIP instructions could be effectively used is great enough to make them useful. Skip-n forms might extend the usefulness by allowing more than one instruction to be skipped. However, the cost increase comes in the memory system (see above) and the register file. What are the cost/performance trade-offs? A thorough study needs to be done on the sensitivity or robustness of multiprocessor address traces. One suggestion is to have the opposite of a cache on the network interface processor: buffers which push data away into the right place in the memory system (e.g., large blocks into DRAM and small things into the processor cache). Snoopy caches provide communication and replication of data. How does the miss rate (or communication rate) decrease with degree of replication? Design and implement a DSM system over the ATM network available in the dept. 5) Networking The following projects make use of the ATM network in the department, in particular of the user-level network interface that we've developed. A big part of the problem is that TCP/IP normally sits in the kernel, but other problems have to do with the algorithms and implementations themselves. Implement a really fast TCP over user-level ATM and carefully analyze the performance. He has not done a lot of benchmarking and in particular no study of the performance under congestion has been done. For example, what is the fastest MPEG encoder/decoder you can build? The key here is not just to arrive at a fast implementation but to do the analysis so you can convince others that you've arrived at the best possible implementation.",
    "ground_truth": "unknown"
}