{
    "TÃ­tulo": "Recent ZPL Language Changes",
    "Cuerpo": "The newly installed version of ZPL is improved in two ways:  A multitude of small language changes have been incorporated to make the language more convenient/powerful, and many bugs have been fixed. However... ZPL is essentially stable, with all subsequent research being applied to a new language. The following language feature changes will likely require modifications to existing programs: Some data type have been introduced, eliminated, or renamed. Signed and unsigned byte data types are now supported ( sbyte and ubyte ), and unsigned char no longer exists. The unsigned data types have been renamed as summarized below. The compiler generates a direct evaluation when b is an integer constant 2, 3 or 4. &  --->  band(a,b)     bitwise and of integers a, b |  --->  bor(a,b)      bitwise or of integers a, b ~  --->  bnot(a)       bitwise negation of integer a ^  --->  bxor(a,b)     bitwise exclusive or of integers a, b << --->  bsl(a,b)      integer a left shifted b bit positions >> --->  bsr(a,b)      integer a right shifted b bit positions Logical operations have been changed. and ---> & or  ---> | (! Double brackets may optionally be removed in most instances. This is not yet implemented. Reduce, scan and flood operators have changed Reduce   +\\  --->  +<< Scan     +\\\\ --->  +|| Flood    \\\\\\ --->  >> The heuristic here is that the result of reduce (<<) is \"smaller\" than the operand, the result of scan (||) is the same size as the operand, and the result of flood (>>) is \"larger\" than the operand. Region change removed. The region change construct, used to specify the regions for partial reduce and flood, has been removed. Accordingly, the partial reduce and flood operators have changed in that both specify a region following the operator which describes the operand. This region, together with the region \"on the statement\" which describes the result, supply the needed region information for these operations. Thus, for example in the partial reduction [1..n, 1]  A := +<<[1..n,1..m] B;  --Sum B's rows, store in A's col 1 the region following the operator is the region of the operand, i.e. the region to be reduced. The region on the statement specifies the result region, which since relative to the operand region it has the second as a collapsed dimension, the elements of each row are added, and the result is stored into the first column of A. Similarly, for the flood [*,1..m]  Fl := >>[3,1..m] A; -- Replicate A's 3rd row into Fl the region following the operand specifies the array to be replicated, and the region on the statement specifies the region of the result. [ ZPL | UW CSE | UW ] zpl-info@cs.washington.edu",
    "ground_truth": "unknown"
}