{
    "TÃ­tulo": "Software Safety (UW) -- Research",
    "Cuerpo": "The specification language, RSML (Requirements State Machine Language), has a formal foundation and is suitable for automated analysis, but we have also found it to be readable by application experts with little training and minimal mathematical background. Our executable model/specification is the system specification, and the identified hazards and their control requirements are traceable (in both directions) from the early preliminary hazard identification through to design and implementation. As the system development proceeds, analyses and evaluations can be performed that are appropriate to the particular development stage. For more information, see the original RSML paper, Requirements Specification for Process-Control Systems . A paper on the updates to RSML is in preparation. RSML was originally developed to specify the system requirements for TCAS II (an aircraft collision avoidance system). Since that first demonstration of our approach to a real system, we have been extending the modeling language to include intent and design rationale, improving the readability and usability of the models, and developing a suite of automated tools to assist in evaluating the model/specification for safety. Our approach to safety evaluation is based on system safety engineering concepts. They also need to include a variety of analysis techniques and orthogonal approaches: There exists no single safety analysis or evaluation technique that can handle all the aspects of complex systems. The safety analysis tools we currently are prototyping and evaluating include: Simulator. The simulator is operational but we have a few limitations on the language that we need to relax. Starting with a particular hazard, the analyst can use backward simulation to determine whether this hazard could occur and how. Information about the states preceding a hazard can be used to eliminate the hazard from the design. The results of this backward analysis can be presented in the form of a fault tree. For more information, see our paper titled Completeness and Consistency Analysis of State-Based Requirements . Deviation Analysis. Using a formal software or system requirements specification, the analyst provides assumptions about particular deviations in software inputs and the procedure automatically generates the scenarios in which the analyst's assumptions lead to deviations in identified safety-critical outputs. Deviation Analysis Interface A GUI to aid in the use of software deviation anlaysis. These tools are still under development, but our goal is to extend RSML to include the human-computer interface and to apply hazard analysis techniques to this augmented model. The requirements engineering environment supports or will support: A graphical user interface for creating, editing, and browsing specifications.",
    "ground_truth": "unknown"
}