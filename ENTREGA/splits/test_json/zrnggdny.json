{
    "TÃ­tulo": "\nThe Netrek-Java Project\n",
    "Cuerpo": "MIME-Version: 1.0 Server: CERN/3.0 Date: Monday, 06-Jan-97 21:34:25 GMT Content-Type: text/html Content-Length: 7670 Last-Modified: Wednesday, 15-Nov-95 19:02:14 GMT The Netrek-Java Project The Netrek-Java Project by Hiep H Nguyen http://www.cs.utexas.edu/users/hiep/netjav.html Table Of Contents: Proposal Why Netrek? Helping Out (Signing on and Suggestions) Related Web Sites Proposal We propose the gradual porting and migration from C to Java of the client code for Netrek, a popular, interactive, multi-user video game on the internet. The goal is to produce a pure Java application using the graphics, networking and security features of Java, and to develop a methodology for gradual code porting from C to Java. This project will also demonstrate that Java can handle interactive, networked application with real-time graphics. Netrek is one of the most popular, real-time, networked video-game on the internet. It has a wide user base, and is an excellent demonstration of networking, and of graphics capabilities. It has a simple graphics engine, and it is not crucial for the graphics to run fast like other commercial video games, since it was written with networking in mind. (The true speed bottleneck of a game like Netrek is the communication between a Netrek client and server). For example, the first stage of the code port would involve writing a graphics wrapper in Java for the Netrek graphics engine, thus keeping all the other C code in tact. Also there the number of files and functions in a Netrek client is not trivial. It will already have support for networking, and security. Methodology We propose the gradual porting of the client code of Netrek to Java, by using the facilities for calling native C code from Java. Java graphics and networking methods will replace the client code equivalent. Identifying Java functions that will replace the client code. In any video game, the drawback is of course, speed. Of course when, using a browser like HotJava, cacheing can be turned on thus speeding up the process considerably on the next invocation of Netrek. With better hardware, the speed problem should be reduced, but this project will truly test the graphics capabilities of Java. The third speed problem is in the networking engine. Can this be done in Java? Currently the people working on this project are: Jason L. Asbahr (jason@fisher.psych.uh.edu) Spencer Bishop (sbishop@cs.utexas.edu) Stephen Paul Carl (esteban@cs.utexas.edu) Amanda Chou (achou@cs.utexas.edu) Alec Habig (ahabig@bigbang.astro.indiana.edu) Charles Herring (herring@essayons.ncsa.uiuc.edu) Ted Hooban (ted.hooban@telos.com) Craig Howland (Craig.Howland@Eng.Sun.COM) Geri Monsen (gmonsen@comet.lbl.gov) Bach Nguyen (jsbach@ix.netcom.com) Hiep H Nguyen (hiep@cs.utexas.edu) Joey Oravec (joey@gopher.chem.wayne.edu) Matthew Pearson (mpearson@m3.pcix.com) Others: If I forgot your name, Please email me (hiep@cs.utexas.edu) Helping Out Any help on this project in terms of time, knowledge, comments, suggestions or money will be greatly appreciated.",
    "ground_truth": "unknown"
}