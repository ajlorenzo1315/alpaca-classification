{
    "Title": "An Introduction to Scheme and its Implementation - Table of Contents",
    "Body": "Values Tail Recursion (Hunk O) Macros Continuations Iteration Constructs Discussion and Review Using Scheme (A Tutorial) An Interactive Programming Environment  (Hunk B) Starting Scheme Making mistakes and recovering from them Returns and Parentheses Interrupting Scheme Exiting (Quitting) Scheme Trying Out More Expressions Booleans and Conditionals Sequencing Other Flow-of-control Structures Using cond Using and and or Making Some Objects (Hunk D) Lists (Hunk F) Using Predicates (Hunk H) Using Type Predicates Using Equality Predicates Local Variables, let , and Lexical Scope (Hunk J) Using First-Class, Higher-Order, and Anonymous Procedures (Hunk L) First-Class Procedures Using and Writing Higher-Order Procedures Interactively Changing a Program (Hunk N) Replacing Procedure Values Loading Code from a File Loading and Running Whole Programs Some Other Useful Data Types Strings Symbols A Note on Identifiers Lists Again Heterogeneous Lists Operations on Lists Basic Programming Examples (Hunk P) An Error Signaling Routine length Copying Lists append and reverse append reverse map and for-each map for-each member and assoc , and friends member , memq , and memv assoc , assq , and assv Procedural Abstraction Procedure Specialization Procedure Composition Currying Discussion and Review Writing an Interpreter Interpretation and Compilation Implementing a Simple Interpreter The Read-Eval-Print Loop The Reader Implementing read Implementing read-list Comments on the Reader Recursive Evaluation A Note on Snarfing and Bootstrapping Snarfing Bootstrapping and Cross-compiling Improving the Simple Interpreter Discussion and Review Environments and Procedures Understanding let and lambda let lambda define and lambda Currying Procedures are Closures Lambda is cheap, and Closures are Fast An Interpreter with let and lambda Nested Environments and Recursive Evaluation Integrated, Extensible Treatment of Special Forms Interpreting let Variable References and set!",
    "link": [
        "schintro_2.html#SEC1",
        "schintro_3.html#SEC2",
        "schintro_4.html#SEC3"
    ],
    "ground_truth": "unknow"
}