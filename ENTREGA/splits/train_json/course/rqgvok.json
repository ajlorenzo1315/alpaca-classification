{
    "TÃ­tulo": "Systems Programming Home Page",
    "Cuerpo": "133 Amos Eaton Phone 518-276-2819 email: ingalr@rpi.edu or ingallsr@cs.rpi.edu Office Hours: Tu Th 1:30 - 3:30 Texts: Advanced Programming in the Unix Environment by W. Richard Stevens Addison Wesley, 1992 The X Window System: Programming and Applications with Xt by Douglas A. Grading There will be two tests, and six programming assignments. Each of the tests will count 24% of the course grade, the program assignments will be of varying weights depending on their degree of difficulty, but they will total 52%. There will be no make-up exams. However, there will be an optional comprehensive final exam which can be used to replace a missing test or project or your lowest test or project. You may receive as much help as you wish on the use of the operating system, text editors, debuggers, file transfer protocols and so on. You may consult with other members of the class about interpreting the assignment, and you may get help in finding bugs, but not fixing bugs, but you are not allowed to look at or copy another person's code or discuss design decisions with others, and you cannot show your code to others. Students found to be in violation of these guidelines will fail the project, and will be reported to the dean. Programming assignments: This is a programming intensive course, and students are expected to be strong C programmers. While you may use whatever platforms or compilers you wish to develop your code, all code submitted must run on both Sun and AIX platforms on RCS and must compile without errors or significant warnings using gcc -Wall ... . Schedule of Topics Date Topics Reading Tu Aug 27 Unix standards, Posix, debugging, shar Stevens Ch 1,2 Th Aug 29 Structure of a C program, compiling, linking, make, libraries, concept of a system call, errno Stevens, Ch. 7 Tu Sep 3 I/O, Files, file system calls Stevens, Ch 3 Th Sep 5 Files and directories, more system calls Stevens, Ch 4,5,6 Tu Sep 10 Process concepts fork, exec, etc. to networking, protocol stacks Th Oct 24 The Internet, IP Tu Oct 29 TCP and UDP Th Oct 31 Security, Kerberos Tu Nov 5 Overview of the X window system Young, Ch 1,2,3 Th Nov 7 Primitive Motif Widgets Young, Ch 4 Tu Nov 12 Manager Widgets Young, Ch 5 Th Nov 14 Menus and dialogs Young Ch 6,7 Tu Nov 19 Events Young, Ch 8 Th Nov 21 Graphics, color, fonts, bitmaps Young, Ch 9-13 Tu Nov 26 Creating your own widgets Young Ch 14, 15 Tu Dec 3 Review Th Dec 5 Exam Projects General Project Guidelines All projects should follow guidelines for good programming practices. Your program should have a comment at the top with your name, login id, a brief description of what the program is, and any special compiling instructions. Each function should have a brief comment describing what it does. It is not necessary to comment every line, and if your code is well written, it should not require a lot of in-line commenting. variables and functions should have meaningful names, but you can use single letters like i for loop counters and such. Your code should have enough error checking so that no matter what the user does, your program will not seg fault or loop forever, or do other strange things. All code must be written by you and you alone, except that you can use and modify any sample code from the text or from class as long as you provide credit to the source. Miscellaneous Resources At the request of one of the students, here is a link to a list of all of the RFCs (Request for Comments).",
    "ground_truth": "course"
}