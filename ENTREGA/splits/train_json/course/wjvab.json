{
    "TÃ­tulo": "\nCS 367 - Lecture 2\n",
    "Cuerpo": "Date: Thu, 07 Nov 1996 19:23:52 GMT Server: NCSA/1.5 Content-type: text/html Last-modified: Thu, 31 Oct 1996 18:30:59 GMT Content-length: 20386 CS 367 - Lecture 2 CS 367-2 Introduction to Data Structures Fall 1996 Course email address: cs367-2@cs.wisc.edu Course home page: http://www.cs.wisc.edu/~cs367-2/cs367.html INSTRUCTOR: Yannis Ioannidis Office:  7357 Computer Sciences Office hours:  Tuesday 8:45-9:30 am / Thursday 8:45-9:30 am Office phone:  263-7764 Email address: yannis@cs.wisc.edu Home page: http://www.cs.wisc.edu/~yannis/yannis.html Contents News Teaching Assistants Lecture Information The C++ Language Text Grading Exams Course Schedule Assignment 0 Programming Assignments Late Policy Cheating Help Program Grading Style External Documentation Internal Documentation Using Unix and Vi The Program Development Cycle News Assignment 3 Assignment 3 is now ready. So if there are any women in this class who would like to talk to someone about majoring in computer science, or doing graduate studies in computer science, or if there are any women who would like some extra help with their classwork, they should see Suzan (a computer science grad student) during her office hours or email her to make an appointment. C is also widely available, but after an initial startup period you will be more productive in C++ than in C.) If you go on to take more computer science courses, with few exceptions you will be required to use C++ in those courses. For my lectures I will often (but not always) be following CS 367 Lecture Notes - Fall 1993 by David J. DeWitt. See also the help section below. As I mentioned above, the lectures will often follow the DeWitt notes, although I may supplement them with a few handouts during the course of the semester. The exams will be based on the lecture material, reading assignments in the notes, and the course assignments. Grading There will be one or two evening exams during the course of the semester, a final exam and five programming assignments. It should not be your picture from your 1st birthday, nor should it be the one from that boy/girl scout trip in the summer of 1984. If you prefer to use a home computer, you may do so, with certain restrictions: You must have a C++ compiler on your home machine; you must log on to your university account often to read email and get copies of data files; finally, we will require that you turn in your C++ program electronically (via email) so if you work at home you must make provisions to download your programs to your university account and to make sure that they compile and run with the g++ compiler on the SPARCstations. My office hours are intended as a time for me to re-explain concepts that I have presented in class but about which you are still confused, or to answer your specific questions about course material. (See the notes on style below for more information about clarity). The program should handle such situations in a reasonable and logical manner (that is, it should not simply blow up). Completeness:  You should incorporate all information into your program;  there should be no need for any sort of extra (paper) documentation. Generality: The program should be as general as possible, subject to consideration of efficiency and clarity. You should avoid arbitrary limitations (such as a bound on the size or complexity of the input) whenever possible. External Documentation This should be included as a long comment at the beginning of your program. The name of a variable should tell as much about it as is possible without making it too long; additional information can be supplied by a comment. Using Unix and Vi Many people working with UNIX for the first time will find that it takes some time to become comfortable with it (this is particularly true if your only previous programming experience is with Pascal using MacPascal on a MacIntosh.) I strongly urge you to put in the time early in the semester to become comfortable with Unix.",
    "ground_truth": "course"
}