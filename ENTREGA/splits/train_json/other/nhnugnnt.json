{
    "TÃ­tulo": " Scott Smith's Research Interests ",
    "Cuerpo": "Date: Wed, 15 Jan 1997 00:18:02 GMT Server: NCSA/1.5.1 Last-modified: Fri, 15 Dec 1995 17:24:12 GMT Content-type: text/html Content-length: 6373 Scott Smith's Research Interests Scott Smith's Research Interests There has been a large body of important foundational research done in the area of programming language semantics. My goal is the practical application of this work to full-featured programming languages, languages that have features such as memories, object-orientedness, rich notions of type, exceptions, and concurrency. Active Research Areas Constrained Types for Object-Oriented Programming Languages My main research interest now is in the area of constrained typing. The types inferred are very expressive: they appropriately type binary methods in object-oriented programming languages. A rigorous reworking of the Actor model of computation Operational semantics of executions given. Only fair executions considered, for unfair executions never arise in practice. Explicit, dynamic modeling of external agents and their interactions. Here is a paper on this topic. Less Active Research Areas Semantics for Typed Object-Oriented Programming Developing a sound semantics for typed notions of inheritence is a long-standing research problem. We believe state is a critical component of OOP, and we thus directly model objects with state. Most of the current research in typing OOP has been for purely functional languages. Although this gives a good first approximation to the problem, enough progress has been made in this arena that it is time to work directly over a language with state. These concepts include notions of ordering a <= b , directed set, complete partial order, monotonicity, continuity, least fixed point principle, finite element, omega-algebraicity, and fixed point induction. To date this approach has been developed for functional languages, and preliminary extensions to languages with memories have shown possibilities. Here is a paper on this topic. The translation was proven correct by defining a formal operational notion of equivalence, and incrementally translating the specification to the circuit in small steps that preserve equivalence. Some other features of this work include the following. A new notion of \"translational equivalence\" is defined to state how a translation preserves meaning when the language itself is changing. This is some of the first work in circuit theory to consider fairness. Here is a paper on this topic.",
    "ground_truth": "other"
}