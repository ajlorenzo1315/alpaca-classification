{
    "TÃ­tulo": " CS 736 Project Suggestions (Spring 96)",
    "Cuerpo": "As you can see, most of the projects listed here are open-ended research questions, and we will definitely discover some interesting stuff at the end of the projects --- I will be just as excited about them as you will be! File Systems: Cache Management As the disk performance continues to lag behind microprocessor performance, file system is increasingly becoming a performance bottleneck in many systems. The file system performance is often determined by how effectively the file cache is used. LRU-2 replacement: in deciding about replacement blocks, consider the times of the last two references to the file, instead of just the last reference (like is done in LRU); this is an algorithm suggested by database researchers, but it might have good application in file cache management as well. 3) @inproceedings{db:lru-k, author = \"Elizabeth J. O'Neil and Patrick E. O'Neil and Gerhard Weikum\", title = \"The {LRU-K} Page Replacement Algorithm For Database Disk Buffer ing\", booktitle = SIGMOD93, year = 1993, month = May, pages = \"297--306\" } File System Trace Replay If we have a good file caching algorithm, how could we prove that it performs better than existing ones? The result would be a comparison of the different buffer caching policies in terms of elapsed time on real systems (instead of file cache hit ratios). Papers you might want to read for this project: 1) http://www.eecs.harvard.edu/~keith/papers/realloc.ps.gz Better File Caching in Solaris While the above two projects are above kernel level, this one digs down and tries to find out what needs to be done to change Solaris' file caching policy. Pick any of the policies listed above (or policies that you come up with), and implement them in the Solaris kernel. On the other hand, operating systems have not managed the memory very well. Although most operating systems provide virtual memory, many applications cannot run on machines with relatively small memory because the paging performance is too poor. Memory Intensive Applications Instrument the Solaris kernel to collect information related to VM system: page fault information (pid, memory address, time, etc. Would it have been better if Solaris used a fixed partition of memory among the VM and file cache? Is there a better one? Pick various processors/machines and see if there are better page coloring algorithms. \" The cache management layer can return the document or request it from another workstation if it knows that the document is cached in its region. In addition, the cache manager needs to coordinate with servers to maintain the consistency of cached documents (i.e. keeping them up to date). Can this be speeded up? \" Kernel Reliability \"b) Kernel reliability:... Another project would be to look for panics in the system and see if they can be handled gracefully. A good test would be to have kmem_alloc return random failures on kmem_alloc(NOSLEEP) and see if the system still works or how it can be fixed. Parallel I/O Systems and Applications How would one build a parallel I/O system?",
    "ground_truth": "other"
}