{
    "TÃ­tulo": " Solutions for Problems in MidTerm I ",
    "Cuerpo": "MIME-Version: 1.0 Server: CERN/3.0 Date: Monday, 06-Jan-97 20:49:38 GMT Content-Type: text/html Content-Length: 7375 Last-Modified: Tuesday, 08-Oct-96 21:43:57 GMT Solutions for Problems in MidTerm I ------------------------------------PROBLEM #1--------------------------------------------- Only a single Pascal statement is required, although the computation could be done with a couple of statements instead. ------------------------------------PROBLEM #2--------------------------------------------- The procedure is all that is needed. program problem2; var s : string; n : integer; begin writeln('enter a string'); readln(s); vowelCount(s,n); writeln('number of vowels is: ',n); readln; end. ------------------------------------PROBLEM #3--------------------------------------------- The procedure is all that is needed. program problem3; type integerArray = array [1..100] of integer; var A : integerArray; n, i : integer; begin writeln('enter an integer'); readln(n); fib(A, n); writeln('fibonacci of ',n,' is: '); i := 1; while i <= n do begin writeln(A[i]); i := i + 1; end; readln; end. ------------------------------------PROBLEM #4--------------------------------------------- No, not every Pascal program is an algorithm. That is, some Pascal programs fail to halt in finite time because they contain an infinite loop, such as the following program: program infiniteLoop; var i : integer; begin i := 1; while i = 1 do writeln('I am looping ... '); end. ------------------------------------PROBLEM #5--------------------------------------------- Since we have dealt with array in class, we'll use four arrays to store our information: title : stringarray artist : stringarray recording_studio : stringarray no_in_stock : integerarray We also need a variable to keep track of the number of unique CDs in the inventory (to know when to stop the loop. It then calls Print to output a report and does this for the entire array. ------------------------------------PROBLEM #6--------------------------------------------- A Database Machine can be built \"on top of\" a Pascal Machine by writing a Pascal program that runs on the Pascal Nachine and implements the operations of the Database Machine. ------------------------------------PROBLEM #8--------------------------------------------- program problem8; type integerArray = array [1..100] of integer; var Arr : integerArray; n: integer; begin {Initialize the array to zeros} n := 1; while n <= 100 do begin A[n] := 0; n := n + 1; end; {enter integers and count their frequency} writeln('enter an integer between 1 and 100, or -1 to stop'); readln(n); while n <> -1 do begin A[n] := A[n] + 1; writeln('enter an integer between 1 and 100, or -1 to stop'); readln(n); end; {write out the frequency of integers that occurred more than once} n := 1; while n <= 100 do begin if A[n] > 1 then writeln(n, ' occurred ', A[n], ' times. '); n := n + 1; end; readln; end. ------------------------------------PROBLEM #9--------------------------------------------- A procedure's formal parameters may have different names than the actual parameters used in a call to the procedure. Also, the procedure may be used by many programs, each of which calls the procedure with different actual parameters. <sentence> -> <noun phrase>             <verb phrase> |                               | v                               v <determiner><noun>      <verb><noun phrase> |                |                 |              | v                v                 v              v the              girl             chases     <determiner><noun> |              | v              v a             ball part b. It is conceivable that a grammar checker could be written using such rules. Those sentences that could not be generated with the rules would be deemed incorrect. However, the set of rules would be very large.",
    "ground_truth": "other"
}