{
    "TÃ­tulo": " Lecture notes - Chapter 2 - SAL",
    "Cuerpo": "each HLL statement maps into 1 or MORE SAL instructions each SAL instruction maps into 1 or MORE MAL instructions About SAL: -- one instruction, declaration per line -- comments are anything on a line following `#' (comments may not span lines) Pascal: var        variablename:  type; type is       .word      if integer .byte      if character .float     if real (floating point) .data       # identifies the start of the declaration section #   there can be more than 1 .data section in #   a program .text       # identifies where instructions are #   there can be more than 1 .text section in #   a program .asciiz  \"a string.\\n\"  # places a string into memory # and null terminates the string. SAL             Pascal             C NOTES: 1. the operation result depends on the type of the variables. Pascal if-then-else (a conditional go-to!) SAL 'ifs' and 'gotos' -------------------------------- SAL                  Pascal if (count < 0) then begin count := count + 1; end; bgez count, endif add count, count, 1 endif:      # next program instruction goes here Structured loops can be built out of IF's and GOTO's (test and branch) while: if  (count <= 0) then goto endwhile; a := a mod count; count := count - 1; goto while; endwhile: while (count > 0) { a = a % count; count --; } /* do statement until expression is TRUE */ repeat if (a < b) then a := a + 1; if (a > b) then a := a - 1; until a = b; /* do statement while expression is TRUE */ /*   when expression is FALSE, exit loop */ do { if (a < b) a++; if (a > b) a--; } while( a != b); while loop example Pascal: while (count < limit) and (c = d) do begin /* loop's code goes here */ end;",
    "ground_truth": "other"
}