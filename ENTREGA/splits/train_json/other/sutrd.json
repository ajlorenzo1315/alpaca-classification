{
    "TÃ­tulo": "CS 537 - Sample Questions",
    "Cuerpo": "You can assume that each STOCK.itemno value refers either to a toy or a book (but not to both). Print the names of manufacturers who make both a toy of type \"truck\" and a book of type \"bedtime story\" Print the names of purple toys made by \"Acme Toy Company\" where the store has at least 100 of them in stock Print the phone numbers of the manufacturers who make the most expensive book known to the store. Suggest a record structure for tuples of R. Suggest a page structure for pages of R. Instead of storing an entire tuple as a record (\"horizontal partitioning\" of a relation), another alternative is store each column value for all tuples contiguously (\"vertical partitioning\"). Find one counter example to each of the last two questions (i.e., one query for which vertical partitioning is good, and one for which it is good to store multiple relations' records on the same page). Describe a database query processing scenario for which LRU is ideally suited. What is the principle behind LRU, and why does the principle fail for the second scenario? Is there some way to improve LRU to correctly apply the principle (or to work in more cases)? Q.5: Memory Management Suppose there is enough main memory (say 1 GB) in the system to hold relation R (400 MB) and relation S (400 MB). How about blocked nested loops join? Find a counter-example where your answer to the previous question is invalid. Q.6: Join Algorithms Consider the problem of joining a 1,000,000 tuple relation R with a 50,000 tuple relation S. In both relations, 5 tuples fit on a page. Explain how the GRACE hash join algorithm works. Can the GRACE hash join be used to compute a non-equality join? Explain why or why not. Your boss is an expert on join algorithms and you want to impress by adapting join techniques to this problem. How can sorting be used for projection? How can hashing be used, and how would you make efficient use of main-memory for this task? How would you change it if histograms were maintained about the column frequency distributions? If System-R supported a GRACE hash join, is there an analogous notion? Can you suggest an extension to the System-R optimizer join enumeration strategy that will also consider the appropriate placement of expensive selections and projections?",
    "ground_truth": "other"
}