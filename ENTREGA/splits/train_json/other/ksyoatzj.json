{
    "TÃ­tulo": "Research & Teaching Summary",
    "Cuerpo": "To combat this, my research has developed techniques that permit high-level languages, and in particular object-oriented languages, to be implemented more efficiently, enlarging the set of problems to which these languages can realistically be applied. This can be done by applying compiler analyses and transformations to discover the implementations that are invoked by dynamic dispatches. If the compiler can prove that only a single implementation can be invoked from a dynamic dispatch site, then it can be converted to a direct procedure call, which is then amenable to other optimizations, such as inlining. To support more efficient implementations, my research has explored the use of whole program analysis and optimization to improve the information available to the compiler. For example, because the complete inheritance hierarchy of the program is known, the compiler can optimize away all dynamic dispatches for which only a single implementation of the behavior exists in the program. The remaining dynamic dispatches are places where programmers really might use the flexibility, because multiple implementations of a particular behavior are defined in the program. An issue with these techniques that perform optimizations are based on the current structure of the program is that they introduce complex dependencies from the generated code to various aspects of the program's source code. Since Vortex is written entirely in Cecil, a language with many of the high-level features that I espouse, it also serves as a demonstration that such languages can be practical, given appropriate implementation techniques: its performance has been sufficient to put it to daily use in an interactive development environment. The techniques I have developed, embodied by their implementation in Vortex, have been remarkably successful: the optimizations found in Vortex improve the performance of large Cecil programs by a factor of four over an optimizing baseline without these techniques, and experiments are currently underway to assess their effectiveness on C++ and Modula-3 programs. First, I will continue to investigate implementation issues related to object-oriented languages. Second, I would like to explore the synergistic interaction between language design and language implementation. Finally, as the gap between the source language and implementation language widens, it becomes more difficult for programmers to identify and understand performance bottlenecks. As a graduate student at the University of Washington, I've been a teaching assistant (TA) both for the introductory undergraduate computer science courses (three quarters) and for the graduate courses in compilers and programming languages (one quarter each). This provided me with valuable experience in developing a course curriculum, exams, and projects, and in giving course lectures. Through my experience as both a TA and an instructor, I have discovered that teaching is challenging, but it is also rewarding to see students learn and prosper when given the proper stimulation. I feel that my teaching skills would best be utilized in courses such as compilers, programming languages, and software engineering. I have consistently received very good and excellent ratings on my teaching evaluations, and these ratings have shown improvement in every quarter that I have taught. Jeff Dean was an excellent instructor.\" \"Your knowledge, enthusiasm, organization, preparedness for lectures, encouragement, and the way you answered questions were especially good.\" are pretty hard to grasp, but Jeff gave very good explanations and examples\" \"Thorough and clear teaching, very good teaching manner (i.e. easy to follow, not threatening or intimidating, but not boring either)\" As well as some excerpts from my evaluations as a teaching assistant: \"Of the dozens of TAs with whom I have interacted (I've TAed as well as been TAed to), Jeff is perhaps the best.\"",
    "ground_truth": "other"
}