{
    "TÃ­tulo": "Multisurface Method Tree with MATLAB",
    "Cuerpo": "Table of Contents Generation of the Decision Tree Displaying the Decision Tree Pruning Cross-Validation Storage of Decision Trees Examples Generation of the Decision Tree The MATLAB representation of the matrices A and B (from now on denoted by A and B), must be placed in the MATLAB environment. To generate this matrix, call (in the MATLAB environment): T = msmt_tree(A,B,max_depth,tolerance,certainty_factor,min_points) In the above expression the various symbols are defined as follows: A, B: MATLAB representation of the matrices A and B . tolerance: percentage of allowable error in a leaf node (must be between 0.0 and 1.0). If this argument is not given, then tolerance is set (by default) to 0.0. certainty_factor: used in C4.5 pruning algorithm (see Pruning ). min_points: used in point pruning algorithm (see Pruning ). Number of points of set A at this node. Number of points of set B at this node. Number of points of set B at this node. This MATLAB implementation allows for pruning using 2 different algorithms:  (1) Error-based pruning from C4.5:  Programs for Machine Learning, and (2) Minimum misclassified points algorithm. Error-Based Pruning To prune the given decision tree using the error-based pruning algorithm (outlined in C4.5:  Programs for Machine Learning), call (in the MATLAB environment): T = prune_tree_C45(T,A,B,certainty_factor) where: T: matrix representing the decision tree in the MATLAB environment. A, B: MATLAB representation of matrices A and B . The decision tree may also be pruned by this algorithm when the tree is generated by giving a value for certainty_factor in the call: T = msmt_tree(A,B,max_depth,tolerance, certainty_factor, min_points) For a detailed description of the pruning algorithm, see J. Ross Quinlan. If a plane is  generated that splits a node and has less than this number of allowable misclassified points, this decision node is made into a leaf node. This pruning algorithm can be called (in the MATLAB environment) by: T = prune_tree_points(T,A,B,min_points) where: T: matrix representing the decision tree in the MATLAB environment. A, B: MATLAB representation of matrices A and B . The decision tree may be pruned using this algorithm when it is generated by giving a value for min_points in the call: T = msmt_tree(A,B,max_depth,tolerance, certainty_factor, min_points) See prune_tree_points.m file. Cross-Validation The performance of the MSM-T algorithm on a given data set may be tested by cross-validation. The cross-validation procedure can be initiated by making the following call (in the MATLAB environment): [percent,confusion_matrix,ave_planes] = cross_val(A,B,num_groups,max_depth,tolerance,certainty_factor,min_points) where: A, B: MATLAB representation of matrices A and B . Storage of Decision Trees A decision tree may be written to any specified file using the following call (in the MATLAB environment): msmt_write_file(T,'filename') where: T: matrix representing the decision tree in the MATLAB environment. filename: name of the file to be written (NOTE: this name must be enclosed in single quotes) Once a tree has been written, it can be retrieved and put back in the MATLAB environment with the following call (in the MATLAB environment): T = msmt_read_file('filename') where: filename: name of the file to read (NOTE: this must be enclosed in single quotes) T: the decision tree is place in the MATLAB environment as matrix T. See msmt_write_file.m and msmt_read_file.m files.",
    "ground_truth": "other"
}