{
    "TÃ­tulo": "Sound Editor",
    "Cuerpo": "MIME-Version: 1.0 Server: CERN/3.0 Date: Sunday, 01-Dec-96 19:07:57 GMT Content-Type: text/html Content-Length: 7129 Last-Modified: Friday, 08-Dec-95 01:33:07 GMT Sound Editor Sound Editor Szu-Wen (Steven) Huang , Jing (Vince) Li, Ting-Chun Janet Liu Introduction This project aims to implement a sampling resolution-independent digital audio engineering tool that can be used to create moderately complex special effects. The project should sport an easy-to-use and fairly portable interface across various Unix/X platforms. Ideally, this program should be able to utilize commonly-available hardware features such as mono/stereo audio playback and recording. This function does not aim to interface with a device capable of production-quality audio synthesis. Pause The program should be able to stop in the middle of a playback. Rewind The program should be able to return to a certain sample earlier in time and resume playback from there. Record (Optional) If hardware support permits, this program should be able to digitize samples from an external audio source. File Operations (Optional) Currently, the Sun Audio Format (.au) is deemed most appropriate for reasons of portability and ease of programming. Raw Waveform The program should be able to display the pulse-code modulation (PCM) format digitized samples as a waveform in time domain. Spectrum The program should display a frequency spectrum synchronized with the playback to show the distribution of frequencies. This display would be useful in visualizing amplitude distributions over time. Time Domain Operations These functions modify the input waveform in the time domain, and do not require a Fast Fourier Transform (FFT) or its inverse to operate. All time domain operations can be performed on the entire file or some selected subset. It will be implemented by mixing several copies of the sample in decreasing strength with a corresponding shift in time Fade These two function incrementally increase or decrease volume over a range in time. Backmasking This function reverses the waveform in time, such that the last input will become the first input, and vice versa. Amplitude Scaling This function is used to modify the amplitude of a range of samples to effect an increase or decrease in volume. Upsampling is probably accomplished by interpolation, and downsampling by tossing away samples. Frequency Domain Operations The following operations require processing in the frequency domain. Graphic Equalizer This function can be used to enhance or inhibit certain frequency ranges, for example, to reduce noise. Morphing This function can be used to transform one spectrum into another incrementally over time.",
    "ground_truth": "other"
}