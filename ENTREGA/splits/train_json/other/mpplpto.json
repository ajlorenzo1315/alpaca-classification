{
    "TÃ­tulo": "GVU: PVaniM -- Visualization/Animation in Cluster Environments",
    "Cuerpo": "PVaniM provides a general purpose set of views that work with all PVM applications, and provides support for users to build custom application specific animations. The two main components of PVaniM are a tracing library and a general purpose set of animations that work with all PVM applications. The PVaniM system provides its own robust tracing package for PVM. PVaniM not only performs clock synchronization and tachyon removal for its ``wall clock'' timestamp, but it also provides a pure Lamport logical timestamp as an aid in determining the concurrency and causality of events that take place in the application. The second main component of PVaniM is a general purpose library of animations that work with all PVM applications. This library was developed using the the POLKA Animation Designer's Package , and users may also use this package to develop their own application specific animations. All of the PVaniM system is available via anonymous FTP from ftp.cc.gatech.edu under pub/people/stasko . When users begin a session with PVaniM, they are presented with the PVaniM Menu, an Information Box, and a Polka Control Panel. The PVaniM Information Box displays message communication information that can be acquired by clicking with the left mouse button on objects in some of the views. The History view is the first option available in the PVaniM menu. This can be deciphered by using the History Legend view, the second option listed in the PVaniM Menu. This view is a more complex version of a Feynman diagram, and is also known to many as a Lamport timeline view. Varying circle radii are used to denote message size and the color of the circle is the same as that used in the history view. When a message is delivered, an arrow ``grows'' from the coordinate of where the message was sent to the correct Lamport delivery time on the receiver's timeline. This will place in the PVaniM Information Box pertinent data regarding the arrow (which represents a message communication) such as who sent the message, who received it, its type and length. Messages are represented as circles that smoothly move into the center of the ring of processes when sent near and end up in the vicinity of the process that the message is intended to be received by. When a process receives a message, the message moves from its position in the center of the ring to the process. This is a famous ParaGraph view where each process is represented as being computing, sending a message, or receiving a message. This is a simplistic version of the ParaGraph view as it automatically provides a time scaling such that the entire view fits in the Gant window. Back to Software Visualization Home Page Questions or comments?",
    "ground_truth": "other"
}