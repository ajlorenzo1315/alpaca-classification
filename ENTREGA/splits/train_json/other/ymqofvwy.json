{
    "TÃ­tulo": " Project 1: Martix Products ",
    "Cuerpo": "Your program will gets its input from and send its output to the BasePak runtime window. Input parameters ------------------------------------------------------------------------------------------------------------- A    m x n matrix of 16-bit unsigned integers     A is the first matrix in the product. B    n x p matrix of 16-bit unsigned integers     B is the second matrix in the product. User interface The \"user interface\" of your program will be minimal---this is an assembly language program, after all. Your program should prompt the user for the parameters m , n , and p , successively, then allow the user to enter the values of the elements of the matrix, A , then the values of the matrix B . After these values have been entered, your program should output the matrices A and B and then output the result matrix C . Matrices should be output in standard order, i.e., a row of elements in the matrix should correspond to a row of numbers on the screen. For example, if A were a 2 x 2 matrix with elements a11 = 1, a12 = 2, a21 = 3, and a22 = 4, then A would be output as: 1 2 3 4 Matrices should be input by prompting the user for elements, one at a time, in the same order in which they would be output. For example, the matrix A given above would be entered via the following exchange (underlined text indicates the program's output, non-underlined text indicates the user's input): A[1][1]: 1 A[1][2]: 2 A[2][1]: 3 A[2][2]: 4 Sample Run A run of your program should look something like the following: m : 2 n : 3 p : 4 A[1][1]: 0 A[1][2]: 1 A[1][3]: 2 A[2][1]: 3 A[2][2]: 4 A[2][3]: 5 B[1][1]: 10 B[1][2]: 11 B[1][3]: 12 B[1][4]: 13 B[2][1]: 14 B[2][2]: 15 B[2][3]: 16 B[2][4]: 17 B[3][1]: 18 B[3][2]: 65510 B[3][3]: 20 B[3][4]: 21 apply. Each subroutine should begin with a header that looks like this: ;------------------------------------------------------------------------- ; ; <Name of function> ; ; ; Synopsis ;  <A brief description of what the function does, who calls it, ;   why, and any exceptional conditions.> ; ; HLL description: ; ;  <Put in high level language (e.g., C, pascal, pseudo-code) ;   description of routine here.> ; ; Register usage: ;  <Map out what registers are used for> ; ; Input Conditions: ;  <What should the format of the registers and stack be on entry ;   to the routine?> ; ; Output Conditions: ;  <What will the format of the registers and stack be when the ;   routine returns?> ; ; Stack frame: ;  <What does the stack frame look like? For example, here's the code of a routine that swaps the two registers D0 and D1 if D1 < D0. ; ; Compare D0 and D1 to see if we need to do anything. ; ; Epilog: Restore registers, clean up stack frame, return. RTS Try to give a high level description in the function header, a more detailed description in the block comments, and a blow-by-blow in the individual line comments. In addition, for this project, be sure you document the following aspects of your program: your method of laying out matrices in memory. your indexing conventions. Misc. (For this project, simply taking the low-order word of the return from decin_long would be acceptable for inputting 16-bit unsigned integers (though that wouldn't be a such a great idea in a real program), and using decout_long will work for outputting 16-bit unsigned integers as long as you remember to clear the high word of d0.) a hardcopy of a sample run of your program.",
    "ground_truth": "other"
}