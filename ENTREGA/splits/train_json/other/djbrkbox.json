{
    "TÃ­tulo": "\nCSE 415  Prog. Assignment 3 Sample Solution\n",
    "Cuerpo": ";  Each id is a sublist off the main list consisting of four items: ; 1) Features of left side ; 2) Features of right side ; 3) Identity number ; 4) Familiarity score (taken from copy packet 1) ; ; Each feature list consists of an atom followed by it's simplification score ; for that identity. For each identity, ; all features are in a single list in the following structure: ; First is the feature, followed by an integer which = the number of symbols in ; the atom. The third element is an integer which indicates where the given ; feature is located in the equation: ; 1 = feature is on the left side only ; 2 = feature is on both sides ; 3 = feature is on the right side only ; The sequence repeats itself for each feature. Next, make a list of the ; features which are in the id on either side. Each ; heuristic will put its output in the form of a list of cons cells with ; END_OF_LIST as the last element in order to use this function. (defun print_cons_list (list) (format t \"SCORE  ~S  IDENTITY# ~S ~%\" (car (car list)) (cdr (car list))) (COND ((EQUAL (SECOND list) 'END_OF_LIST) NIL) ((EQUAL 1 1) (print_cons_list (cdr list)))) ) ;\"best_output\" puts a cons cell with the score generated in best_score and its ; associated id# in a single element cons list with END_OF_LIST following it ; in order to make use of the print_cons_cell function. If so, it returns a cons cell with 2 items: the id # and ; familiarity score of the id. (defun idchecker (id atom) (COND ((NOT (EQUAL (match (car id) atom) NIL)) (CONS (FOURTH id) (THIRD id))) ((NOT (EQUAL (match (cadr id) atom) NIL)) 2) When there is a match, it returns the ; number and f-score of the identity, as generated in idchecker. If so, it returns a list with the simplification score ; of that feature as well as the id # of the identity. (defun simp_idchecker (id atom) (COND ((NOT (EQUAL (match (car id) atom) NIL)) (LIST (match (car id) atom) (THIRD id))) ((NOT (EQUAL (match (cadr id) atom) NIL)) (LIST (match (cadr id) atom) (THIRD id))) When there is a match, it returns the ; simplification score of that feature and id# of the identity as generated in ; the simp_idchecker function. ;\"simp\" recursively calls itself in order to compare a list of features to all ; of the id's in the idtree. The function ; returns a list of cons cells containing a simplification score and id number ; for each id which is checked. The sublist, ; in practice, is either the left or right side of a known identity and the ; feature is taken from the identity being proven. ;\"match_both_idsides\" compares a given feature to both the left and right side ; of a known identity. ;\"left_right_both\" produces a 2 integer list based on whether or not a feature ; is in the left or right side of the identity being proven. ;\"all_features_one_all_ids\" generates a list of cons cells, each one with the ; effectiveness score and it's corresponding id # - in that order. ;\"demonstration\" is used to show all the heuristics when used on a given ; identity list and to-be-proven identity.",
    "ground_truth": "other"
}