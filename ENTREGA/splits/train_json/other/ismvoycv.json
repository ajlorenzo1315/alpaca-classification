{
    "TÃ­tulo": "SSGRG Publications Page",
    "Cuerpo": "Composition Validation and Subjectivity in GenVoca Generators , To appear in IEEE Transactions on Software Engineering , special issue on Software Reuse. Unfortunately, building compilers for such languages is largely an ad hoc process; there are no tools and design methods that allow programmers to leverage the design and code of compilers for similar languages, or to simplify the evolution of existing languages to include more features. Synthesizing Rule Sets for Query Optimizers from Components , Technical Report TR-96-05, Department of Computer Sciences, University of Texas at Austin, April 1996. In this dissertation, we describe Prairie, an environment for specifying rules for rule-based optimizers that satisfies all four of the above requirements. The Prairie specification language is presented and we show how it allows a DBI to design an easily extensible rule set for a rule-based optimizer. In this paper, we review the current state of domain modeling, and present some of our work on the ADAGE project, an integrated environment that relies heavily on domain models for generating real-time avionics applications. Specifically, we explain how we detect errors in the design of avionics systems that are expressed in terms of compositions of components. Validating Component Compositions in Software System Generators , In Proceedings of the International Conference on Software Reuse '96 (Orlando), 1996. Generators synthesize software systems by composing components from reuse libraries. In this paper, we present domain-independent algorithms for the GenVoca model of software generators to validate component compositions. Our specification language models data languages based on the composition of primitive building blocks for semantics and the customization of the syntax for invoking the compositions. In this paper, we explain the LEAPS algorithms in terms of the programming abstractions of the P2 data structure compiler. A Software System Generator for Data Structures . This dissertation discusses our model (and how it differs from standard models), our Predator compiler, and the results of our validation efforts. In this paper, we describe a prototype data structure generator and the building blocks that populate its library. P++: A Language for Software System Generators . P++ is a programming language that supports the GenVoca model, a particular style of software design that is intended for building software system generators. P++ is a programming language that supports the GenVoca model, a particular style of software design that is intended for building software system generators. We present a domain-independent model of hierarchical software system design and construction that is based on interchangeable software components and large-scale reuse. We present a model of the data structure domain that is expressed in terms of the GenVoca domain modeling concepts.",
    "ground_truth": "other"
}