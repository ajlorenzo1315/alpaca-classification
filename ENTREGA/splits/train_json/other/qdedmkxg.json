{
    "TÃ­tulo": " Notes on the Hangman Programming Assignment ",
    "Cuerpo": "I don't think it is a terribly hard assignment, but I may have rushed through the material on the string class. Basic Implementation One way to implement the Hangman game is to keep two strings: the secret phrase, and the \"partially-revealed\" secret phrase. The partially-revealed secret phrase is the same as the secret phrase, but all of the letters are \"blanked out\". When the user guesses a letter in the secret phrase, the corresponding letter in the partially-revealed secret phrase is \"unblanked\". Now, if the user guesses the letter \"o\", then the partially-revealed secret phrase will be modified; for each \"o\" in the secret phrase Howdy Doody! , the corresponding character in the partially-revealed secret phrase is changed from the underscore character to the letter \"o\". Pseudo-Code get random secret phrase initialize the \"partially revealed phrase\" initialize number of chances display partially revealed secret phrase initialize guessed letters to empty string loop until out of chances or secret phrase has been guessed ask user for guess if not a letter error \"Not a letter\" else if already guessed error \"Already guessed\" else add guess to string of guessed letters if guess is in secret phrase message \"Good guess\" reveal matching letters in partially revealed phrase else message \"Bad guess\" subtract one from number of chances display partially revealed secret phrase if secret phrase guessed message \"Congratulations\" else message \"Sorry, secret phrase was: \" secret_phrase Get the Random Secret Phrase For this program, you \"get\" the random secret phrase by calling the function random_secret_phrase . So we call this function by simply putting an empty pair of parentheses after its name: random_secret_phrase (); However, if we just wrote this line in our program, it would call the function, but throw away its return value! In general, we must use the return value of a function in some way. The appropriate thing to do with this string is to store it in a variable, so we can refer to that value whenever we need to. Initialize the Partially-Revealed Secret Phrase The partially-revealed secret phrase should be the same as the secret phrase, but with all letters changed to underscores. string partial_phrase = secret_phrase; for (int i = 0; i < partial_phrase.length(); i++) { if ( isalpha (partial_phrase [i]) ) partial_phrase [i] = '_'; } This code loops over each of the characters in the partially-revealed secret phrase; each character that is a letter is changed to an underscore. Since we know the number of characters in the partially-revealed secret phrase is partial_phrase.length() , we can use a simple counting loop. This function has the following prototype: bool char_in_string (char ch, string str); This tells us that the function has two inputs (one character and one string), and returns a boolean (i.e., true or false) value. So, if you call this function, and supply as inputs the guess and the string of previously-guessed letters, it will tell you whether or not the guess has been made before. Since char_in_string returns a boolean value, we can use the return value as the condition of an if statement: if ( char_in_string (guess, guessed_letters) ) Add Guess to String of Guessed Letters guessed_letters += guess; Remember that the += is just a shorthand for the following: guessed_letters = guessed_letters + guess; The character guess is automatically converted to a string, and the + operator concatenates the two strings into a single string. if ( char_in_string (guess, secret_phrase) ) Reveal the Matching Letters in the Secret Phrase When the user guesses a letter which is in the secret phrase, you must \"unblank\" the correct letters in the partially-revealed secret phrase by changing them to the guessed letter. Do this by looping over each character in the secret phrase; if that character is the same as the guess, then \"reveal\" the corresponding character in the partially-revealed secret phrase by changing it from an underscore to the corresponding character in the secret-phrase. for (int i = 0; i < secret_phrase.length(); i++) { if (secret_phrase [i] == guess) partial_phrase [i] = secret_phrase [i]; } Checking whether the Game is Over The game ends when either the player has run out of chances or has completely guessed the secret phrase. The first condition can be checked with the boolean expression num_chances == 0 The second condition can be checked by comparing the secret phrase to the partially-revealed secret phrase.",
    "ground_truth": "other"
}