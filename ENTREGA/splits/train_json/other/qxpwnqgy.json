{
    "TÃ­tulo": "Notes on Programming in C",
    "Cuerpo": "If the book claims that variable names should be chosen meaningfully, doesn't it then follow that variables whose names are small essays on their use are even better? I don't think so. But they've been accumulating in my head, if not on paper until now, for a long time, and are based on a lot of experience, so I hope they help you understand how to plan the details of a program. Under no circumstances should you program the way I say to because I say to; program the way you think expresses best what you're trying to accomplish in the program. The machine doesn't care how pretty the program is - if the program compiles, the machine's happy - but people do, and they should. More on this in the next essay. But the second form is an expression; it is not so simple. If i and j and k are all indices into the node array, it's very easy to slip up, and the compiler cannot help. As a rule, if you find code containing many similar, complex expressions that evaluate to elements of a data structure, judicious use of pointers can clear things up. If your code needs a comment to be understood, it would be better to rewrite it so it's easier to understand. Which brings us to Complexity Most programs are too complicated - that is, more complex than they need to be to solve their problems efficiently. Mostly it's because of bad design, but I will skip that issue here because it's a big one. Don't tune for speed until you've measured, and even then don't unless one part of the code overwhelms the rest. (Even if n does get big, use Rule 2 first.) Data structures, not algorithms, are central to programming. There is no Rule 6. Programming with data Algorithms, or details of algorithms, can often be encoded compactly, efficiently and expressively as data rather than, say, as lots of if statements. A classic example of this is parsing tables, which encode the grammar of a programming language in a form interpretable by a fixed, fairly simple piece of code. Code and data are the same, or at least they can be. Function pointers Another result of the tyranny of Pascal is that beginners don't use function pointers.",
    "ground_truth": "other"
}