{
    "TÃ­tulo": " Using GNU Common Lisp on Department Workstations ",
    "Cuerpo": "In the two windows you should see the default UNIX prompt '>'. One window will be used to run the version of Common Lisp we will be using called gcl . The other window will be used to edit UNIX files containing the Lisp functions and programs you write. Run the GCL interpreter using the command gcl in the first window. Since GCL has the same prompt as the default UNIX prompt on the workstations, you might want to change the UNIX prompt to be something else. To do this, run the shell command (you can put this command in your \".cshrc.local\" file to avoid doing it every time): set prompt=whatever-you-like GCL has on-line help facilities . Edit your program in a file using a text editor such as vi or Emacs . For example, the following creates a file named my-functions.lisp and defines a single Lisp function named welcome in it: UNIX> vi my-functions.lisp Emacs commands for Editing Lisp . Vi Commands for Editing Lisp . To set these you can either set them each time you enter vi by doing: :se ai sm lisp or to have these settings set every time you enter vi , just edit the .exrc file in your home directory to include the line: set ai sm lisp Finally, there is also an operator in vi that realigns existing lines as though they had been typed in with lisp and autoindent set. See also the use of the (,),{, }, [[ and ]] commands for moving around within Lisp functions. Call Vi from Within GCL : As an alternative to keeping separate windows for vi and GCL, we can define a Lisp function \" vi \" which will allow us to call vi from within GCL, and automatically load the changes when we're done editing. Run your program in GCL : >(welcome) Hello! If there are any runtime errors, use vi in the other window to modify your program, and then, in the GCL window, reload the file containing the program and run it again. Compile your program : >(compile-file \"my-functions.lisp\") >(load \"my-functions.o\") >(welcome) After compiling, an executable file my-functions.o is created in your current directory. The break package is recognizable as the prompt changes from '>' to '>>'. There are many options for you to choose in this package: Break-loop Command Summary ([] indicates optional arg) :help       this summary :bl [j]     show local variables and their values, or segment of vs if compiled in j stack frames starting at the current one :bt [n]     BACKTRACE [n steps] :down [i]   DOWN i frames (one if no i) :env        describe ENVIRONMENT of this stack frame (for interpreted). (use-fast-links t) is the default Low level commands: ------------------ :p [i]           make current the i'th PREVIOUS frame (in list show by :b) :n [i]           make current the i'th NEXT frame (in list show by :b) :go [ihs-index]  make current the frame corresponding to ihs-index :m               print the last break message :c               show function of the current ihs frame :q [i]           quit to top level :r               resume from this break loop :b               full backtrace of all functions and special forms :bs [name]       backward search for frame named 'name' :fs  [name]      search for frame named 'name' :vs [from] [to]  Show value stack between FROM and TO :ihs [from] [to] Show Invocation History Stack :bds ['v1 'v2 ..]Show previous special bindings of v1, v2,.. or all if no v1 Be sure to log out of the workstation when you leave.",
    "ground_truth": "other"
}