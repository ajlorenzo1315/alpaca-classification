{
    "TÃ­tulo": "\nCPS 100E, Fall 1996, Second Assignment\n",
    "Cuerpo": "Table of Contents [ Introduction | Input/Output | Coding | Grading | Submitting | Extra Credit ] ( A Makefile and sample input files are accessible in ~ola/cps100e/kwic on the acpub system. Given a list of titles and a list of words to ignore, you are to write a program that generates a KWIC (Key Word In Context) index of the titles. In a KWIC-index, a title is listed once for each keyword that occurs in the title. Keywords are any words that are not listed in the list of words to ignore. Each of the words to ignore appears in lower-case letters on a line by itself and is no more than 10 characters in length. The Output The output should be a KWIC-index of the titles, with each title appearing once for each keyword in the title, and with the KWIC-index alphabetized by keyword. If a word appears more than once in a title, each instance is a potential keyword. All other words in a title should be in lower-case letters. The code for insertion sort can be found in the Tapestry text, it is reproduced below for a vector of ints. This assignment is worth 24 points and 4 of the points are for minimizing storage by storing titles only once. As a first pass, you may decide to store each title once for each occurrence of a keyword. Minimizing Storage One option for storing titles once is to use a vector of titles, storing each title once in the vector (of course the titles may be vectors of strings, but this isn't a problem --- you can also make the titles structs that contain a vector of strings). With this solution there will still be four KwicTitle objects for The Sun Also Rises but myTitle is now an index to a title rather than a title (again, think about this carefully and ask questions.) There will probably be several private member functions that will be called from PrintIndex and that will call each other. For example, you might store the words to ignore in a Vector<string> myIgnore and then write a function as shown below to search this vector. bool Kwic::IsIgnore(const string & s) { int k; for(k=0; k < myIgnoreCount; k++) { if (myIgnore[k] == s) return true; } return false; } Of course you don't need to do this, it's just an example of a private member function ( Kwic::IsIgnore ) that could be useful. Points will be awarded as follows: Behavior Points Generates KWIC-index 6 Sorted Properly 2 Handles duplicate key words in title 2 Nice output (centered) 2 Memory Efficient 4 Coding Style (uses classes, comments) 6 README 2 Submission You should create a README file for this and all assignments. Extra Credit For extra credit you should not use a vector to store the words in a title, you should use a List (see chapter 6 of Tapestry ). You can still use an index for each keyword, but you'll need to count words rather than index directly to the keyword because the list class doesn't support random access. To submit the extra credit assignment, type: submit100 kwic.xtra README .......... where you include all the files you use for this version of the kwic program.",
    "ground_truth": "other"
}