{
    "TÃ­tulo": "CS 302 Section 70 Lecture Notes - Week 7",
    "Cuerpo": "INTEGER SCORES(10) ... PRINT *, SCORES(3) View the array as a single row of boxes. Two-Dimensional Arrays 2-D arrays have two subscripts. CHARACTER TICTAC(3,3) The size of the array (i.e. number of values it can store) equals sizeX*sizeY TICTAC(1,1), TICTAC(1,2), TICTAC(1,3), TICTAC(2,1), TICTAC(2,2), TICTAC(2,3), TICTAC(3,1), TICTAC(3,2), TICTAC(3,3), 3*3 = 9 different values! READ *, TICTAC(X,Y) Important : The order of the subscripts is very important. TICTAC(2,3) View a 2-D array as a grid . TICTAC(X,Y) +---+---+---+ X = 1   2   3 Two subscripts are needed to uniquely specify a position in the grid; i.e. the column and row . TICTAC(COL, 2) TICTAC(1,NINT(-COS(180)*2)) 2-D arrays do not have to be square . INTEGER GRADES(10,4) ... PRINT *, 'Grades for student',STU END DO 2-D Arrays and DO Loops 1-D arrays are processed with a single DO loops whose counter is used as the array subscript. END DO 2-D arrays are processed with two DO loops. DO Y = 3, 1, -1 C        Print columns of each row (X-axis) END DO Important : outer loop for rows Y, inner loop for columns X. 2-D Array Arguments To pass 1-D arrays as arguments to a user-defined function/subroutine, pass the array name and the array size . PRINT *, GETMAX(SCORES, MAXSIZ) ... INTEGER FUNCTION GETMAX (LIST, SIZE) To pass 2-D arrays as arguments, pass the array name and both the array sizes sizeX and sizeY . END DATA Statement The DATA statement provides a convenient way to initialize an array. In this case, the \"column\" is considered to be the first subscript; i.e. TICTAC(column, row) CHARACTER TICTAC(3,3) TICTAC(X,Y) REAL          GPA(NUMSTU) Called parallel arrays because all the values for a particular student have the same subscript.",
    "ground_truth": "other"
}