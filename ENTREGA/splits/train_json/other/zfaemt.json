{
    "TÃ­tulo": "Suggested Robotlab M.Eng Projects ",
    "Cuerpo": "Hook this up to the ATM video source and build an application of realtime vision tracking/etc. with rosemary as the host. Can use ideas from (1), but the robot walks around, and, using depth and position information produces a map of the world, uses it to navigate. (Matt) [Tom's project: a set of navigational becons were created for the robots] Video Processing and Machine Vision Automatic Storyboarding - use the dissolve detector code to automate generation of movie storyboards, possible outputing html pages that show the story board. (Justin and Ramin) Parallelization of the Mpeg encoder Write a 'real-time' (or at least very fast) Mpeg encoder using the ATM cluster/SP2 and ATM video source. (Matt) Port Split-C to Windows NT . (Matt and Justin V.) Parallel RIVL . This project would provide fine-grain data parallel processing support for the RIVL architecture, basically by (a) porting various RIVL image-processing primitives to Split-C (for automatic parallelization) and (b) allowing users to write new RIVL primitives in Split-C for linking into the system. The easiest way to do all of this, I think: Port RIVL itself to Split-C (should be easy) and make existing RIVL behaviour a subset of the \"Split-RIVL\" (that is, local processing on one machine). This would greatly speed the production of optimized code for a given machine. I have examples started of this idea for the rank transform. Search-based compilation Modelling compilation as a search problem on a system with constraints : The system will consist of a set of processors a set of memories an interconnect network a set of constraints number of processors size of memory which processor can access which memories in a cycle ordering imposed by the operations to be performed. etc. The code to be parellised will be tight loops and hence small. The idea is to search the space of complied code to find the optimal one. This is most probably NP complete, but speed is not the essence here. (Nawaaz) Performance Simulations The simulation is with respect to the algorithms we are interested in. The many aspects that can be simulated are : a) Cache -- implement and study cache accesses on various algorithms. Here we assume a single processor. b) Shared Memory Multiprocesssors -- simulate and study the effect of bus bandwidth, memory architecture , cache coherence on the system (with repect to alogrithms like correlation etc) (Nawaaz) DSPs Implementation / Compilation / Code generation for DSP chips (MPV?)",
    "ground_truth": "other"
}