{
    "TÃ­tulo": "High-Performance Synchronization",
    "Cuerpo": "We are continuing this research in several directions, including (1) mechanisms for cooperative synchronization and scheduling, which minimize unnecessary spinning, maximize processor locality, and avoid contention for both lock and non-lock data; (2) comparative evaluation of alternative mechanisms for atomic update of shared data structures, including locks, non-blocking synchronization, and function shipping; (3) implementation of atomic hardware primitives on scalable architectures; (4) evaluation of the interaction of synchronization with coherence; and (5) new synchronization algorithms. Principal Investigator Michael L. Scott Associate Professor and Department Chair scott@cs.rochester.edu 716-275-7745 Recent Graduates Leonidas Kontothanassis Bob Wisniewski Graduate Students Maged Michael Galen Hunt Srinivasan Parthasarathy Publications Project-specific papers Systems Technical Report Archive Pseudocode Scalable spinlocks and barriers. Includes test-and-set and ticket locks; queue locks; and centralized, tree-based, and fft-style (``butterfly'') barriers. From the 1991 TOCS paper. Scalable busy-wait reader-writer locks. From the 1991 PPoPP paper. From the 1994 IJPP paper. Use no atomic instructions other than read and write. Preemption-safe and scheduler-conscious synchronization algorithms. Includes two queue-based mutual exclusion locks; test-and-set and ticket locks; a fair, scalable, queue-based reader-writer lock; competitive and optimal-time small-scale barriers; and a scalable barrier. All algorithms avoid busy-waiting for action by preempted processes, including those waiting in line for a FIFO queue or ticket lock. Fast concurrent queue algorithms. Executable Code Basic and scalable spinlocks and barriers. Code to run on the Sequent Symmetry , BBN Butterfly 1 , and BBN TC2000 . Scalable busy-wait reader-writer locks. Code to run on the BBN Butterfly 1 , BBN TC2000 , and Kendall Square KSR 1 , Variations on Lamport's fast mutual exclusion lock. Preemption-safe and scheduler-conscious synchronization algorithms. Code to run on the Kendall Square KSR 1 and Silicon Graphics Challenge . Code to run on the SGI Challenge. Fast concurrent queue algorithms .",
    "ground_truth": "project"
}