{
    "TÃ­tulo": "\nThe Maruti Project\n",
    "Cuerpo": "Maruti Design Goals . The Maruti 3.0 System Architecture Background The purpose of the Maruti project is to create an environment for the development and deployment of critical applications with hard real-time constraints in a reactive environment. The proof-of-concept version of this design was implemented to run on top of the Unix operating system and supported hard and non-real-time applications running in a distributed, heterogeneous environment. The initial version of the distributed Maruti has also been implemented, allowing Maruti applications to run across a network in a synchronized, hard real-time manner. The design of Maruti has been guided by the following application characteristics and requirements: Real-Time Requirements The most important requirement for real-time systems is the capability to support the timely execution of applications. Integration of Multiple Requirements The major challenge in building operating systems for mission-critical computing is the integration of multiple requirements. For example, the real-time requirements preclude the use of many of the fault handling techniques used in other fault-tolerant systems. Design Approach and Principles Maruti is a time-based system in which the resources are reserved prior to execution. The basic design approach is outlined below: Resource Reservation for Hard Real-Time Jobs Hard real-time applications in Maruti have advance resource reservation resulting in a priori guarantees about the timely execution of hard real-time jobs. The resource requirements are specified as early as possible in the development stage of an application and are manipulated, analyzed, and refined through all phases of application development. Predictability through Reduction of Resource Contention Hard real-time jobs are scheduled using a time-driven scheduling paradigm in which the resource contention between jobs is eliminated through scheduling. Since resources may be shared between jobs in the calendar and other jobs in the system, such as non-real-time activities, there may be resource contention leading to lack of predictability. Fault tolerance is supported by early fault detection and handling, resilient application structures through redundancy, and the capability to switch modes of operation. Failure of a replica may not affect the timely execution of other replicas and thereby the operation of the system it may be controlling. Portability and Extensibility Unlike many other real-time systems, the aim of the Maruti project has been to develop a system which can be tailored to use in a wide variety of situations-from small embedded systems to complex mission critical systems. When multiple processors function autonomously, their use in hard real-time applications requires operating system support for coordinated resource management. Real-time applications may execute in the Maruti/Mach or Maruti/Standalone environments and maintain a high degree of temporal determinacy. In this environment the same code which runs in the other two environments can execute while access to all Unix debugging tools is available. Support for Temporal Debugging When an application executes in the Maruti/Virtual environment its interactions are carried out with respect to virtual real-time which is under the control of the user. Principal Investigators Dr. Ashok Agrawala Dr. Satish Tripathi Research Programmers Jan Morales Current Visitors Dr. S.V.",
    "ground_truth": "project"
}