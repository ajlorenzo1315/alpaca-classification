{
    "TÃ­tulo": "Etch Overview",
    "Cuerpo": "How Etch Works Etch reads executable binaries (and, under Win32, DLLs) for an application, modifies the image, and writes a new one that has been enhanced for measurement or optimization. For example, a program may be instrumented to count instructions, or to count the occurrence of each instruction, or to simulate a cache by tracking memory references. Data collection Once instrumented, an executable can be run. At that time, instrumentation routines collect data about the program. Data processing Once run, any data generated by an instrumented executable can be processed. Instrumentation To instrument a program, Etch is invoked with the name of an executable and a DLL. The DLL provides a set of routines which are invoked for each instruction in the executable. The call back functions can in turn direct Etch to modify the executable with respect to the specific instruction. The directions in effect say \"before (or after) this instruction runs, please call some specific function with some specific set of arguments.\" Any functions referenced in the callback routines, as well as the Etch runtime library are included in the new executable. Data Collection The executable written by Etch can be run, and any instrumentation routines will run as a side effect of running the program. Instrumentation routines, as the program is running, can inspect the state of the program, for example, the contents of registers, or effective addresses. All addresses, whether text or data, are relative to the original binary, so the collection routines do not have to compensate for the fact that they are part of a modified executable. Data Processing When an Etched program terminates, its data collection routines can save information about the executable to disk. At a lower level, detailed information about a program's performance can be obtained such as is shown below in the graph of instruction cache performance for a collection of popular Win32 programs. For example, the instrumentation phase, rather than adding new instructions, can direct Etch to write the executable out according to a different code layout optimized for cache and VM behavior. The impact of optimization The graph below shows the reduction in instruction cache misses and execution time (in cycles) for a collection of popular Win32 programs that have been optimized for code layout using Etch on a 90Mhz Pentium. The results were measured using inputs different than those used during training. The User Interface In addition to a programming interface, Etch also offers a graphical user interface for performing common instrumentation and optimization operations. For example, Etch may rewrite the original binary to change the layout of data or code in order to improve cache or virtual memory performance.",
    "ground_truth": "unknown"
}