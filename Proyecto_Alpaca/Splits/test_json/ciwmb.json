{
    "TÃ­tulo": "\nThe Church Project: A Functional Language Using Intersection Types\n",
    "Cuerpo": "Type Theory R. Harper and J. Mitchell. On the type structure of Standard ML . A direct algorithm for type inference in the rank-2 fragment of the second-order lambda calculus. An extension of Standard ML modules with subtyping and inheritance . The Definition of Standard ML . Appeared in J. Functional Programming , 3(4):391-430, 1993. To appear in J. Functional Programming , 1995. This paper presents a variant of the SML module system that introduces a strict distinction between abstract types and manifest types (types whose definitions are part of the module specification), while retaining most of the expressive power of the SML module system. The solution relies on an extension  of ML, where the language of types is sorted  and considered modulo equations, and on a record extension of types. We obtain a type system for a language with record concatenation  by composing the translation with typechecking in a language with   record extension. We apply   this method to  a version  of ML with record extension   and obtain an extension of ML with either asymmetric or symmetric concatenation. Dynamic Typing in Polymorphic Languages . In Science of Computer Programming , 1993. Typing in the presence of overloading, subtyping, and recursive types. The Implementation of Functional Programming Languages . This report details the design and implementation of the ZINC system. Set Based Analysis of ML Programs Technical Report CMU-CS-FOX-93-03, 1993. The type system is proven to have the principal typing property, and the analysis is proven to be correct and partially complete (unfolding a definition cannot improve the results of the analysis). Appeared in Record 1994 ACM SIGPLAN Workshop on ML and its Applications . Letters on Programming Languages and Systems , June 1992.",
    "ground_truth": "unknown"
}