{
    "TÃ­tulo": "Incrementalization",
    "Cuerpo": "A loop body can be regarded as a program f parameterized by an induction variable x that is incremented on each iteration by a change operation + . Given a program f and an input change operation + , a program f' that computes f(x+y) efficiently by using the result of the previous computation of f(x) is called an incremental version of f under + . Sometimes, information other than the result of f(x) needs to be maintained and used for efficient incremental computation of f(x+y) . Thus, the goal of computing loops efficiently corresponds to constructing an extended version of a program f and deriving an incremental version of the extended version under an input change operation + . Caching, exploiting, and maintaining intermediate results of f(x) , i.e., values computed in the middle of computing f(x) . Discovering, computing, exploiting, and maintaining auxiliary information of f(x) , i.e., information not computed at all f(x) , that can be inexpensively maintained. In \"Systematic Derivation of Incremental Programs\" , we gave a general systematic transformational approach for deriving an incremental version f' of a program f under an input change + . The basic idea is to identify in the computation of f(x+y) those subcomputations that are also performed in the computation of f(x) and whose values can be retrieved from the cached result r of f(x) . In \"Caching Intermediate Results for Program Improvement\" , we gave a method, called cache-and-prune , for statically transforming programs to cache all intermediate results useful for incremental computation. In \"Discovering Auxiliary Information for Incremental Computation\" , we proposed a approach for finding auxiliary information. Auxiliary information is, by definition, useful information about x that is not computed by f(x) . The key insight of this approach is: A. Consider, as candidate auxiliary information for f , all intermediate computations of an incremental version of f that depend only on x ; such an incremental version can be obtained using some techniques we developed for solving P1 and P2. (We use techniques developed for solving P1 and P2, instead of just P1, so that the candidate auxiliary information includes auxiliary information useful for efficiently maintaining the intermediate results.) How can one discover which pieces of candidate auxiliary information are useful and how they can be used? Extend f with all candidate auxiliary information, then apply some techniques used in our methods for P1 and P2 to obtain an extended version and an incremental extended version that together compute, exploit, and maintain only useful intermediate results and useful auxiliary information. Thus, on the one hand, one can regard the method for P2 as an extension to method for P1; on the other hand, one can regard method for P1 as aids for solving P2. Similarly, on the one hand, one can regard the method for P3 as an extension to methods for P1 and P2; on the other hand, one can regard methods for P1 and P2 as aids for solving P3. Although the entire approach seems complex, each module or step is simple. Y. Annie Liu yanhong@cs.cornell.edu Last updated 6/29/96",
    "ground_truth": "unknown"
}