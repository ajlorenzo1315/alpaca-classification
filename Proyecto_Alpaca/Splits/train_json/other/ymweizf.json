{
    "TÃ­tulo": "CS 110 Section 2 Lecture Notes - Week 2",
    "Cuerpo": "2.1 - 2.8 Notes: Fortran Line Structure FORTRAN programs are composed of lines , with one statement per line. C Compute the total cost from the C unit cost and quantity ordered TOTCST = UNTCST * QUANTY Continuation Marker If a statement is too long to fit in the 72 columns then it can be split over two or more lines. Put a \" + \" in column 6 to indicate that the line is a continuation of the previous line. END Tells the compiler that this is the last statement in the program and it should stop compiling. FORTRAN Variables Variable Names Variables store important values that your program will use or hold intermediate results. Right: TOTCST, QUANTY, INDEX2 Wrong: TotalCost, 2B_Or_Not_2B Variable Types You must explicitly specify the type of each variable; i.e. what sort of value it will store. CHARACTER *9 NAME CHARACTER CHAR WARNING: If you don't explicitly specify the type of each variable then it will be declared a default type according to the I-N Rule (see Pg. Constants If the value of a variable is known when you write the program and it never changes (e.g. Pi) then turn it into a constant with the PARAMETER statement. Assignment Statement To store a value to a variable you have declared use the assignment statement . Example: y = x^(z^2) can be written as Y = X**Z**2 Arithmetic Functions FORTRAN has many built-in arithmetic functions (see Pg. A = B + MOD(C, 4) Type Matching The type of an expression should match the type of the variable the result is going to be stored in. If either operand is type REAL then the result is type REAL . CHARACTER Strings To assign a value to a CHARACTER variable it must be either another CHARACTER variable or a string enclosed in single apostrophes. PRINT *, X, ' plus ', Y, ' equals ', X+Y You can print values, variables, arithmetic expressions or CHARACTER strings. PRINT *, 'Please enter the cost of the item' READ *, UNTCST Unformatted Input To read in data entered at the keyboard by the user use the READ statement. READ *, UNTCST You always read in a variable you are specifying where the value is to be stored. 11  20  67 ENTER The values the user types in must be entered in the same order and be the same type as the variables in the READ statement. It will compile, but fail running when the program reached this point. Can result in many things; example, if we had READ *,...... ad nauseum ,B,C and the B was on the 72nd column, rest of the line would be ignored, and you'd still have a legal statement (not reading in C may cause a problem later in the program, though). If the B was on the 71st column, however, then only the C would be ignored, and you'd have a syntax error (READ cannot end with a comma).",
    "ground_truth": "other"
}