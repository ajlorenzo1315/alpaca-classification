{
    "TÃ­tulo": "\nUsing the GNU Emacs/Common Lisp Interface",
    "Cuerpo": "We will be using an implementation called  Allegro CommonLisp (or AllegroCL for short), which is one of the more heavy-duty industrial implementations out there. Allegro CL is sold by Franz Incorporated. One of the nice things about AllegroCL is that it comes with a nice package for integrating the process of writing and debugging code within a single Emacs session. The basic idea is that you have one \"process buffer\" open in which Lisp is constantly running, then one or more \"editor buffers\" each one of which shows a file with some Lisp code in it. The interface allows you to do things like point to a function definition in an editor buffer and send it automatically to the Lisp process, get online entries from the CommonLisp manual, find out where a particular function is defined and automatically pop up an editor window for it, and so on. I'll try to show you some of the cool features in class too. Getting started To use this environment, you must do the following: Create a file called .emacs in your home directory (if it doesn't already exist) and put the following line in it: (load \"~c341/.emacs\") Create a file called .clinit.cl in your home directory and put the following line in it: (load \"~c341/.clinit.cl\") Now, when you start up emacs to edit a Lisp file (the Lisp file must have an extension of  .cl or .lisp) you will automatically be put into an Emacs mode called \"CommonLisp\" mode. For example, typing emacs foo.cl will open the file foo.cl for editing in a special Common Lisp mode buffer that allows you to do things like skip forward and backward by S-expressions, look up the definition of a symbol in the online Common Lisp manual, get a list of what functions call a particular function, and so on. Type C-x C-s to save changes to the current file Type C-x C-w to save the current file to a new file - you will be prompted for a file name Type C-x b to switch to another buffer (that you had already worked with in this session. These commands are special to buffers in \"Common Lisp mode,\" which is the mode assigned to any buffer open to a file with an extension of .cl : Type C-c l to go from your Lisp file to the Lisp interpreter. This will also start up the Lisp interpreter if it is not already running. Type C-c e to go from the Lisp interpreter to the Lisp file most recently edited Type C-c b to send the currrent buffer to the Lisp interpreter to be evaluated. Type C-c C-b to do the same thing as C-c b AND switch to the Lisp buffer Type C-c d to evaluate the current defun in the Lisp interpreter Type C-c c to compile the current defun in the Lisp interpreter Type C-c C-a to go to the beginning of the current defun Type C-c C-e to go the end of the current defun. Type C-c . Emacs will start a Lisp session and display a buffer for editing foo.cl. Now you can type C-c l to start a Lisp session and put you in it. Emacs will prompt you for several things when you first start a Lisp session: Buffer, Host, Process Directory, Image name, Image arguments. Most of the time, you should just hit return to take the default values on all of these questions. Now switch to the Lisp process buffer with: C-c l Test the function by typing: (foo '(a b c)) When you are done, exit Lisp and Emacs by typing: (exit) and then C-x C-c For More Information More information about the interface appears in in UW CSE Lab Note 162 . Steve Hanks (hanks@cs.washington.edu), 3/19/96",
    "ground_truth": "other"
}