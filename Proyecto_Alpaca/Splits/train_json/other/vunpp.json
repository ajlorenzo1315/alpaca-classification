{
    "TÃ­tulo": "An Introduction to CODE",
    "Cuerpo": "It can be thought of as a framework , allowing a user to compose sequential code into a parallel program. A graph is a diagram that consists of nodes (represented by icons in CODE) and arcs that interconnect the nodes. Nodes represent computations and arcs represent the flow of data from one computation to another. Parallel programs are then created by composing nodes into graphs -- users draw the nodes and then interconnect them with arcs. Here is the standard way of creating a program with CODE: first, the user draws the graph that shows the parallel program's communication structure. Then the user annotates this graph by filling in forms that describe properties of the nodes and arcs in the graph. A Simple Example When a user first runs CODE, an empty window appears. The most important type of node is a computation node , which represents a sequential computation. These nodes may be composed to form parallel programs by drawing arcs which define the data flow between them. The figure below shows a complete CODE program that uses only computation nodes and arcs. When the program runs, it first executes (or \"fires\") the computation node called Split_Interval which divides the interval in half and sends the endpoints of the sub-intervals to each of the Integ_Half nodes. Annotating the Graph Drawing the graph is the first part of creating a CODE program; annotating it comes next. Where the graph defines the parallel structure of the program, the annotations define aspects of the program like what computations are performed, under what conditions a node may fire, data types defined for the program, etc. Annotations are added by filling out each object's annotation form. The figure below shows the annotation form for the computation node Split_Interval . This means that this node is the first one to be executed when the program begins. There is only one start node allowed. The sequential computation defined by this node is part of the \"Specification.\" This specification also includes the mapping between data on the incoming and outgoing arcs and local data used by the computation, as well as conditions under which the node is allowed to fire. home page specifications Introduction to CODE / emery@cs.utexas.edu / Last updated 15 August 1995",
    "ground_truth": "other"
}