{
    "TÃ­tulo": "ZPL Overview",
    "Cuerpo": "Because it is \"implicitly parallel,\" i.e. the programmer does NOT express the parallelism, ZPL programs are simple and easy to write. On this page, ZPL is described at a high level by answering the \"obvious\" questions about it and its implementation. Indeed, when the ZPL compiler encounters the statement A := A + B; and A and B are two dimensional arrays, it generates code that is effectively the same as the C loops shown above. Why create a new array language? For some languages \"high performance\" is part of the name. For ZPL, \"high performance\" is part of the description, as backed by experimental evidence [Dikaiakos,Lewis,Lin95.] This C program, customized to the Intel Paragon and the Kendal Square Research KSR-2, was compared to the 520 line ZPL program for SIMPLE [Lin94]. The experiments indicate that the high level ZPL performs as well as the low-level C program for these two machines. Instead, it exploits the fact that when programmers describe computations in terms of arrays, many scalar operations must be performed to implement the array operations. Perhaps the simplest way to write and run a ZPL program on YOUR Unix machine is to use the Web Compiler . You paste a ZPL program (your own or one of ours) into a window, and click \"compile.\" A \"make\" of this file will result in an executable that can be run on your sequential computer. To run on a parallel computer ZPL must first be targeted to that parallel computer. Once ZPL has been targeted to your type of parallel computer and the libraries installed at your facility, you are ready to use ZPL in parallel. It is NOT necessary to install the ZPL compiler on your workstation, because for the near term all ZPL compilation will be performed at the University of Washington. ZPL is short for the Z (level) Programming Language; see discussion of programming model, above. ZPL was designed and implemented by the Orca Project of the Computer Science and Engineering Department at the University of Washington. The foundational research for the ZPL compiler was funded in part by the Office of Naval Research N00014-89-J-1368. [Lin90] C. Lin and L. Snyder, \"A comparison of programming models for shared memory multiprocessors,\" Proceedings of the International Conference on Parallel Processing, pp. [Lin94] C. Lin and L. Snyder, \"SIMPLE Performance Results in ZPL,\" Languages and Compilers for Parallel Computing , K. Pingali, U. Banerjee, D. Gelernter, A. Nicolau, and D. Padua, eds, pp.",
    "ground_truth": "other"
}