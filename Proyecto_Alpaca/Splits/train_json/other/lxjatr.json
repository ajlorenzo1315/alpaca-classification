{
    "Título": "CS367 Exams",
    "Cuerpo": "Date: Tue, 05 Nov 1996 20:57:46 GMT Server: NCSA/1.5 Content-type: text/html Last-modified: Mon, 14 Oct 1996 14:23:40 GMT Content-length: 7061 CS367 Exams CS367 Exams There will be three exams for CS367, two midterm and one final exam. Information on the exam format , studying tips , and topics for exam 1 may be found below. Topics for the other exams will be added to this page as the semester progresses. I will waive this requirement for verifiable emergencies, but no requests for make-ups will be accepted after the actual exam is given. There will be no make-up for the final. Exam Format Exams have from five to ten questions (some having multiple parts), are designed for a two hour exam period, and an average score of 70 points out of 100. Exam questions fall into three categories, tracing code, writing code, and miscellaneous. Sometimes code is provided that you need to use or supplement to finish the question. Study your notes. Of course this is obvious, but many go about studying their notes in the wrong manner. Don't just reread your notes and think that counts as studying them   Successful studying requires you to be more involved and actively thinking about the material. One of the most effective ways to study is to reorganize and rewrite your notes in a succinct manner in terms that you understand. You'll need to do some memorizing. Form a study group. It is often easier and more motivating to work with others when studying for an exam. Finally avoid cramming! We all know this. Exam 1 Topics Basic C++ discussed in Appendix A of the text will not be directly tested, but it will be required to answer questions concerning topics listed below. The key topics covered are listed below: Basic        *  objects and classes OOP          o  interface vs. implementation o  public vs. private o  data members and member functions o  constructors and destructor o  using objects and calling methods Advanced     *  using default arguments OOP          o  initializer list o  copy constructor (shallow vs. deep) Recursion    *  concept & terminology o  simple recursion and iteration o  tracing using the box method o  programming recursion Complexity   *  concept & terminology o  growth rate functions f(N) o  simplification of f(N) o  big O notation o  order of magnitude functions Search &     *  concepts & terminology Sorting      o  searching - O(N):    linear - O(logN): binary (CH. 2 recursion) o  sorting - O(N^2):    bubble, selection, insertion - O(N^1.25): shellsort - O(N*logN): quicksort, & mergesort Basic        *  defining using * Pointers     o  operators - * \"points-to\" (dereferencing) - & \"address-of\" - new and delete (single and array) o  static vs. dynamic allocation o  arrays and pointers Linked       *  concept & terminology Lists        o  operations (lookup, insert, remove...) o  position vs. key-value oriented o  implementations - singly linked o  variations - tail pointer - dummy head - doubly linked & prev pointer - circular list o  recursion and linked lists Stacks       *  concept & terminology o  operations (push, pop, peek) o  implementations - dynamic array - linked list (free list) o  using the stack adt Copyright © 1996 James D. Skrentny, skrentny@cs.wisc.edu",
    "ground_truth": "other"
}