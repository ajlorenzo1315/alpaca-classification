{
    "TÃ­tulo": "CODE: \"Visual Parallel Programming May Come of Age with CODE\" (HPCwire)",
    "Cuerpo": "MIME-Version: 1.0 Server: CERN/3.0 Date: Friday, 17-Jan-97 00:06:49 GMT Content-Type: text/html Content-Length: 10714 Last-Modified: Thursday, 17-Oct-96 20:04:57 GMT CODE: \"Visual Parallel Programming May Come of Age with CODE\" (HPCwire) from HPCwire , 8/23/96: (reprinted with permission) Visual Parallel Programming May Come of Age with CODE by Alan Beck, editor-in-chief AUSTIN, Texas -- Although visual parallel programming environments are not new, the unusually simple and direct techniques employed by the University of Texas' CODE (Computationally Oriented Display Environment), an abstract declarative graphical environment for parallel programming, promises not only a different but also a much more effective approach to the entire task. The sequential programs may be written in any language, and CODE itself is architecture-independent. With CODE, you make a transition from how something is done to what you're trying to do, at a very high level.\" But with CODE, what you must understand is that a parallel computation structure is basically a directed graph with many paths through it. HPCwire: Given a certain level of skill, how much more efficiently can a parallel programmer function with CODE? What we've done is change the level of abstraction at which programs are described. Let's say you have an old FORTRAN program with a bunch of subroutines for which you want to invoke many parallel copies. We associate one subroutine with a node on the graph. CODE takes care of all the parallel programming book-keeping -- like where the copy is, how to get in touch with it for input or output, how to synchronize it with other routines.\" If you do this, you then have fine-grained data parallelism embedded in the graphical model. A paper on this approach to integration of data parallelism into the graphical model was presented at the last International Parallel Processing Symposium.\" HPCwire: What are the limitations of this approach? There are no conceptual limitations on back-ends. Give us that one graph, click on the icon for the back-end you want, and we compile it with some optimization for each different environment.\" \"The reason this approach to program development isn't particularly well-accepted is because the scientific and engineering community is accustomed to doing business in a certain way -- and working at a certain level of abstraction. And people change the way they think very slowly.\" Give us that one graph, click on the icon for the back-end you want, and we compile it with some optimization for each different environment.\" We have all encountered similar results -- that this was really neat technology, and once you get people trained in it they like it. \"A great part of the benefit is not from the graphical interface -- although it makes programming easier -- but from the fact that we're using a more general, more abstract model of parallel computation.\" BROWNE: \"I think that over the next 10 years, as people learn to change, as everybody has a graphical workstation in front of them, the whole idea of raising the level of abstraction at which people program will take effect.",
    "ground_truth": "other"
}