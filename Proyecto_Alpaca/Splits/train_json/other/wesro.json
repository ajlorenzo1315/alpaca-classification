{
    "TÃ­tulo": "Sample write-up",
    "Cuerpo": "Your write-up should use a similar outline: Abstract An introduction to the project: what it does, why it's useful, etc. Implementation How your group implemented the project. Personal implementation Discuss what you contributed to the project, including the required parts and any bells and whistles that you worked on. The wavelet transform has many advantages: it allows the storage of information at multiple resolutions, is easy to implement, and is very fast to compute. In this project we investigated the use of wavelets for image compression. Wavelets are a natural tool for compression because they isolate the parts of the image that contain a lot of detail. In addition, the coefficients of a wavelet-transformed image can be ordered from most to least significant, allowing for progressive transmission in bandwidth-limited applications, such as when sending an image over the Web. Implementation Our group implemented a wavelet compression program on an Indy R4400, using the libui user interface library. The program allows a user to load an .rgb image, and then compress that image (with a selectable degree of compression) using the wavelet transform. A compressed image, then, is basically an overall average, a few important details, and a lot of zeroed-out coefficients. Personal implementation Though our group worked together on the basic wavelet-transform algorithm, my personal responsibility was saving this transformed image to a file (and, consequently, being able to read that file back in). First, it turns out that although the basic wavelet transform theoretically results in no change in the amount of data, there is initially a substantial increase in the amount of memory used. Already we have increased the amount of memory required by a factor of four! Though this is still almost twice the original amount of storage required, with this change the subsequent compression step, in which small coefficients are zeroed out, then yields a net reduction in storage. When the value represents a series of zeros, the remaining 15-bits encode how many zeros in the series. Results The biggest problem in achieving a high compression rate is in encoding the compressed image on disk. For example, compressing mona.rgb with a 3% loss of quality allowed us to discard about 95% of the coefficients. The resulting file, however, was still about 33% the size of the original. For future work, it would be interesting to investigate other methods of tranforming the original two-dimensional data into a one-dimensional signal. Such methods might produce larger strings of zeros, resulting in more compression.",
    "ground_truth": "other"
}