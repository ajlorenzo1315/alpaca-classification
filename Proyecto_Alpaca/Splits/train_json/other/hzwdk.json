{
    "TÃ­tulo": "\nGuidelines For Writing HTTP Server Scripts\n",
    "Cuerpo": "Date: Tue, 10 Dec 1996 22:42:47 GMT Server: NCSA/1.4.2 Content-type: text/html Last-modified: Tue, 04 Oct 1994 03:39:12 GMT Content-length: 7901 Guidelines For Writing HTTP Server Scripts Guidelines For Writing HTTP Server Scripts This document is intended to be an evolving series of ideas, pointers and other information about writing programs that can be executed by following a WWW link, with particular emphasis on security issues. There are some basic features of server-side scripts that if used correctly will minimize the potential for security problems: NEVER, EVER treat data received from a remote source as instructions to be executed. ALWAYS have the program exit gracefully if it receives arguments it does not understand. NEVER assume the size of the arguments or the data received by the program. Always check the expected size of these objects or know that the interpreter you are using (awk, sh, for example), will make sane, secure decisions if an overflow occurs. A ScriptAlias looks like this: ScriptAlias /a /some/other/place/in/the/filesystem/a which the server interprets to mean: if anyone ever references /a/something , then execute /some/other/place/in/the/filesystem/a and return its output. Note that this implies two things about the executed program: it must send a MIME Content-Type header as its first line of output, to tell the client (Mosaic) what the output actually is (HTML ? etc), and then it should send some \"useful\" output, even if its only an \"OK, message received\" line. Only programs located in places referenced by a ScriptAlias will ever be executed by the server. First of all, any text left over from the URL that has not been \"used\" to find the script will be used to set the value of an environment variable named PATH_INFO. :h+aposto:*&%&^$$#{fhfh} This will result in PATH_INFO being set to: /long=4748.39?//limit:=$!! In addition, if you are using a forms interface, the values of all the <input> and <select> tags in the form will be made available, as the standard input of the program. Invoke it as: /cse/www/htbin-post/urldecode and it will convert any encoded data read from its standard input into its original form on its standard output. More details are available about writing server scripts in the Common Gateway Interface documentation , where a number of other environment variables that are available to the program are described. How to do this locally Currently, only two areas have been named using ScriptAliases. One of them is not currently publically accessible (the filesystem it resides on is not exported to the rest of the department's machines). The other is intended for use by participants in the 590i seminar taking place this quarter: /projects/ai/590i/post-bin An example program, called mail-request , is already there (its a shell/awk script). This is the program I use for the interface to my music collection , so take a look at the HTML source for that stuff to see how this is used. The HTTP daemon will be restarted about 4 times a day, and on the next restart after you have placed a program there, you will able to have a link to it result in its execution. Please take care in how you handle arguments, how to handle input and what your program does or might do .",
    "ground_truth": "other"
}