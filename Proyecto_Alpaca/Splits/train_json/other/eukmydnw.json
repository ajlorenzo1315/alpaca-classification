{
    "TÃ­tulo": "Researchers in Programming Languages and Compilers",
    "Cuerpo": "Visual programming languages design, theory, and implementation. T. B. Dinesh - CWI Object oriented programming; algebraic specifications; theorem proving; visual languages; partial evaluation; ASF+SDF; static program analysis Amer Diwan - University of Massachusetts Garbage collection, inlining, memory system performance, optimization for memory hierarchies, partial evaluation, program analysis, compilers for object-oriented languages. Scott Draves - Carnegie Mellon Partial evaluation, abstraction vs. performance. Robert Harper - Carnegie Mellon Logical frameworks, machine-assisted proofs, ML, ML2000, modules, lambda calculus, type theory, category theory, semantics and logics of programs, functional programming, applications of functional languages to systems programming. John Hatcliff - DIKU, University of Copenhagen Operational semantics, correctness of program transformations, continuations, logics and type theory, logical frameworks, partial evaluation, computational monads, static analysis of programs. James Hook - Oregon Graduate Institute Application of formal methods to software development, the theory and practice of specification and programming languages, and type theory. Logic and computation. Mark P. Jones - University of Nottingham Programming language design and implementation, type theory, module systems, program transformation and analysis, functional programming. Edgar Knapp - Purdue Formal methods for concurrent program development, tool support for program design, retargetable implementation of concurrent programs. Programming and specification language design and semantics, formal methods (program specification and verification), programming methodology, object-oriented programming, functional programming, distributed computer systems. Peter Lee - Carnegie Mellon Semantics-based compiler generation, program analysis and optimization, ML, compiler support for advanced systems software. Mark Leone - Indiana University Run-time code generation, partial evaluation, compiling functional programs, program analysis and optimization, type theory. John Mitchell - Stanford Programming language analysis and design, including module systems, object-oriented programming, type systems, and reasoning about programs; applications of mathematical logic to programming languages and automated reasoning; algorithms for static analysis of programs. Gordon Plotkin - Edinburgh Applications of logic, especially denotational and operational semantics of programming languages; semantics of type systems, monadic theories of computation, general proof theory and the semantics of natural language, particularly type-free intensional logics for situation theory. Jakob Rehof - DIKU, University of Copenhagen Type systems; type inference; logical and computational aspects of type systems; type systems in program analysis. Formal program development (transformation and implementation of algebraic specifications of abstract data types). Mark Reinhold - NEC Research Institute Garbage collection, compilation techniques, type systems, semantics, and the visualization and analysis of program performance. Erik Ruf - Microsoft Research Design, implementation, and optimization of programming languages, and the use of program analysis to support program understanding and transformation. Semantics. Michael I. Schwartzbach - BRICS, University of Aarhus Programming languages: type systems, type inference, static program analysis, data types, language design, implementation.",
    "ground_truth": "other"
}