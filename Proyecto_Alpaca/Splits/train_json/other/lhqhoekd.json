{
    "TÃ­tulo": " Research Summary for Ed Posnak",
    "Cuerpo": "MIME-Version: 1.0 Server: CERN/3.0 Date: Monday, 06-Jan-97 21:37:41 GMT Content-Type: text/html Content-Length: 6549 Last-Modified: Wednesday, 28-Feb-96 00:40:59 GMT Research Summary for Ed Posnak Supporting Adaptive Multimedia Applications in Internetworks Recent advances in computing and communication technologies have made it economically viable to design and implement distributed multimedia information management systems that promise to enhance users' ability to access a rich variety of audio, video, and textual information over globally inter-connected networks. To address this performance heterogeneity, there is a trend toward designing configurable applications that can adapt to the current environment as well as to the changes in resource availability over time. The resource requirements of multimedia applications can vary significantly depending on presentation processing mechanisms such as compression and image processing. Consequently, we have begun investigating adaptive mechanisms for controlling the cost/performance tradeoffs of presentation processing. The PPE is composed of modules that implement primitive compression components (e.g. Huffman coding, Discrete Cosine Transform, etc.) The PPE implementation is bound to a scalable codec at run time based on the media object's compression format and the application's QoS requirements (expressed in terms of frame rate, resolution, and SNR). The implementation can later be dynamically reconfigured to accommodate dynamic changes in resource availability as well as the QoS requirements of applications. Moreover, support for media processing operations can be added by plugging in modules that implement these operations to any codec's internal implementation. Experience developing the PPE toolkit, and using it to implement a number of codecs has provided some insights into how adaptive multimedia applications should be built. Whereas object-oriented design techniques are powerful tools for building dynamically configurable implementations, they carry an associated efficiency cost due to the procedure call overhead of dynamically dispatched method invocations. The development of modular, configurable, and efficient presentation processing mechanisms requires a carefully engineered balance between the use of static and dynamic composition of modules. For instance, in image and video compression, the operations to filter a bit stream, get some number of bits, and decode Huffman symbols should be statically composed because they are invoked with high frequency, but have minimal use for reconfigurability. On the other hand, modules that perform dithering and the inverse discrete cosine transform are good candidates for dynamic configurability because they have multiple implementations with different cost/performance tradeoffs. The power of such a dynamically configurable presentation processing environment depends on the ability to express the configurations as well as the cost/performance tradeoffs. These representations will be used by an automatic configurator to compute appropriate configurations when triggered by a change in user QoS requirements or by notifications of changes in resource availability. The language can also be used to specify protocol configurations that can be downloaded to the client site along with the multimedia data. A key challenge will be to make the language flexible enough to allow the configuration to be altered to support media processing operations, while maintaining consistency with the encode side specification. The presentation processing environment is an integral component of the end-to-end systems architecture for distributed multimedia applications being designed at the Distributed Multimedia Computing Laboratory at the University of Texas at Austin. Specifically, we propose to extend our configurable programming environment to support the QoS-aware transport protocols, and thereby obtain a completely integrated, configurable protocol stack. This stack will support efficient streaming of data from the application to the network adapter and vice versa, as well as methods for accessing multimedia objects from our multiresolution file server.",
    "ground_truth": "other"
}