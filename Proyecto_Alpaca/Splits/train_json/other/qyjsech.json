{
    "TÃ­tulo": "CPS 100 - Assignment 4 - FALL 1996 ",
    "Cuerpo": "This command will copy  files into your directory for you to use. Problem: Word Ladder: Turning Stone into Money The input to the program is the name of a word file. The output is a sequence of words in which consecutive words share all but one letter, starting with the first word and ending with the last. Assignment: Part I You are to write a program ladderq.cc that uses a file of 5-letter words to find the shortest ladder from one word to another using a process outlined below. You must develop a class to do this, the class Ladder has been started for you, but you will need to add more member functions (both public and private). Enter two 5-letter words (length != 5 to end): smart brain Algorithm To find the shortest ladder, you should use the templated Queue class provided (QueueAr, the modified Queue class from the Weiss book) First, store all of the words from the file in a vector of type Wnode * (this is done for you in LoadWords ). The other field of the struct is a pointer to the word that is one letter away from w and that caused w to be put on the queue (the word's predecessor). An easy fix is to make the pointer self-referential, it points to the struct itself (and this will need to be checked when printing ladders). More Details The first word (entered by the user) is looked up in the list of words, and a pointer to the struct containing the word is enqueued. For extra credit your program should be able to handle a first word even if the word is NOT in the list of words (all other words in the ladder, except perhaps for the last, must be in the list of words). Put a pointer to the struct containing the word onto the queue (it's a queue of Wnode pointers). Otherwise enqueue each of the words found if it hasn't been queued up before (you can use the prev pointer fields in a Wnode to determine if a word has been enqueued before --- initially all prev fields should be set to 0/NULL, this helps determine if a word has been enqueued before). You'll probably find it useful to write a function IsOneApart() that is used to determine if two strings are one letter apart. This function does NOT need to be a member function, it has two strings as parameters (const reference) and returns true if the strings are one letter apart. If you build helping/debugging member functions into your class you'll save time in the long run since the member functions can be used to help debug code. You may want to write a separate function to find a word in the vector of words (pointers to words) read in. Using Templates To use the templated Queue class you'll need to do use a file called template.cc . To this end, all .h and .cc files are #included in a separate file template.cc . You can submit by typing make submit (or make submitX if you did the extra credit program) if the correct README file is in the directory from which you submit.",
    "ground_truth": "other"
}