{
    "TÃ­tulo": "CS122 Programming Assignment #4",
    "Cuerpo": "Here are the requirements: Your program must be written in C++. Whatever system you choose, it must have some way of proving to me that it was able to compile your C++ program (for example, by creating a program listing), and must be available on-campus for you to demonstrate your program for me. You must choose one of the advanced sorts we are studying in class, namely Quicksort, Heapsort, or Shellsort, to show in your program. You must design some method of visually demonstrating, through your C++ program, the ideas that underlie your chosen sort. There are *many* possible different designs -- here are just three ideas: Using an IBM PC with its graphics capabilities, along with Microsoft C++ or Borland C++, you could demonstrate a Heapsort. First, you could construct a list of 500 randomly chosen integers, graph them as a \"cloud of points\" (with their list index positions plotted along the horizontal axis and their values plotted along the vertical axis), and then apply a Heapsort to the list and show how the cloud gradually changes shape, first to that of a triangular heap, and from there to the (nearly straight) diagonal line that is the signature of a sorted list. Like the above, showing a cloud of points being sorted by, say, Shellsort, but using SAC, Unix, GNU C++ (g++), and the CURSES screen-control library. You won't be able to show as many points in the cloud, being limited to a maximum of 80 by the standard monitor screen's 80 columns, but the effect would be similar. First, you could ask the user to choose between several possible pivot-picking strategies (we'll discuss what these are in lecture soon, which include picking the 1st, middle, or last item on list, or an item chosen at random, or the median value of three items chosen at random, etc.). You could then visually display the list on the screen as a series of text bars: 1 (31) XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX Your program could pause, and once the user signals that he/she is ready to continue by pressing the enter key, you would then inform the user of the next step involved in performing your Quicksort (\"Now we pick a pivot, namely the item in position #1, which is 21, and use it to partition the list. You could display the entire list each time, but could have some special way of marking that portion of the list that is currently undergoing partitioning (say, by drawing it using capital X's, and drawing the rest of the list using small x's). You could then provide some statistics on how good the chosen pivot-picking strategy was for this particular list (e.g.  \"During partitioning, the average size of the larger of the two partitions formed contained 58% of the available list items, which is 8% above the optimal value of 50%.\"). Show off your knowledge of programming in C++ and of your chosen sort. Your program must actually implement your chosen sort; that is to say, it must be capable of applying your chosen sort to *many* different lists of numbers, not just the same old list over and over. Your program must have some means of acquiring diverse lists of numbers:  by allowing the user to enter the list, or by creating the list randomly and in a different fashion each time it is run, etc. You can, however, place some reasonable constraints on the size of the list and on the range of the values in the list. Here is what you'll need to submit to complete the assignment: You must e-mail me a proposal which specifies: which computer system you have chosen to use which make/version of C++ compiler software you will be using which of the three sorts you have chosen to work with how you are going to visually demonstrate the way your chosen sort works You must turn in standard External Documentation, including Specifications, Algorithm, and Justification. In the place of program executions, you must schedule a 15 minute demonstration of your program with me. You must have submitted your proposal, external documentation, and program listing prior to your demonstration.",
    "ground_truth": "other"
}