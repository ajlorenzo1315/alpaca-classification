{
    "TÃ­tulo": " EEL: An Executable Editing Library ",
    "Cuerpo": "EEL provides abstractions that allow a tool to analyze and modify executable programs without being concerned with particular instruction sets, executable file formats, or consequences of deleting existing code and adding foreign code. EEL greatly simplifies the construction of program measurement, protection, translation, and debugging tools. An edited executable can emulate features that hardware does not provide. For example, the Wisconsin Wind Tunnel architecture simulator drives a distributed, discrete-event simulation of a parallel computer from the logical cycle times of processors directly executing a parallel program. Similarly, one version of the Blizzard distributed shared-memory system edits programs to insert fine-grain access tests before shared loads and stores. In the limit, editing can replace an entire program with instructions for a different architecture. Another use of executable editing is program observation. Profiling and tracing tools, such as MIPS's pixie or qpt, edit executables to record execution frequencies or trace memory references. These tools are widely used to study program or system behavior and computer architecture . More recently, a tool based on EEL, Active Memory, dramatically lowered the cost of cache simulation-to a 2-7x slowdown-by inserting cache-miss tests before a program's memory references rather than post-processing an address trace. How EEL Helps EEL provides five major abstractions (C++ class hierarchies) that allow a tool to examine and modify an executable: executable, routine, CFG, instruction, and snippet. An executable contains code and data from either an object, library, or executable file. A tool can examine and modify routines in any order and place them, and new routines, in the edited executable in any order. EEL represents a routine's body with two further abstractions: control-flow graphs (CFGs) and instructions. A tool edits a CFG by deleting instructions or adding code snippets to blocks and edges. Darrin West and Kiran Panesar, Automatic Incremental State Saving, PADS 10. An overview paper for EEL (appeared in the ACM SIGPLAN PLDI Conference, June 1995). Related Work OM and ATOM project at DEC WRL (now Digital products). Etch tool for editing Win32 x86 executables. James Larus Computer Sciences Department University of Wisconsin 1210 West Dayton Street Madison, WI 53706 larus@cs.wisc.edu 608-262-9519 Last modified: Sat Jun  1 08:09:20 1996 by James Larus larus@cs.wisc.edu",
    "ground_truth": "other"
}