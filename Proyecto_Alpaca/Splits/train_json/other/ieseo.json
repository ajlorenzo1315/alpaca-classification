{
    "TÃ­tulo": "Coupling and Cohesion",
    "Cuerpo": "Date: Tue, 10 Dec 1996 16:47:30 GMT Server: NCSA/1.4.2 Content-type: text/html Coupling and Cohesion COUPLING and COHESION COUPLING An indication of the strength of interconnections between program units. The more connections between modules, the more dependent they are in the sense that more info about one modules is required to understand the other module. Want to minimize number of interfaces between modules, minimize the complexity of each interface, and control the type of info flow. An interface of a module is used to pass information to and from other modules. Interfaces with only data communication result in lowest degree of coupling, followed by interfaces that only transfer control data. (can happen in assembly language) if one refers to local data in another module. modules bound together by global data structures. Control coupling: passing control flags (as parameters or globals) so that one module controls the sequence of processing steps in another module. Stamp coupling: similar to common coupling except that global variables are shared selectively among routines that require the data. More desirable than common coupling because fewer modules will have to be modified if a shared data structure is modified. Many levels of cohesion: Coincidental cohesion: the parts of a component are not related but simply bundled into a single component. harder to understand and not reusable. Code for more than one function may be intertwined, leading to severe maintenance problems. Difficult to reuse Temporal cohesion: all of statements activated at a single time, such as start up or shut down, are brought together. Functions weakly related to one another, but more strongly related to functions in other modules so may need to change lots of modules when do maintenance. May contain only part of a complete function or parts of several functions. Informational cohesion: performs a number of functions, each with its own entry point, with independent code for each function, all performed on same data structure. Different than logical cohesion because functions not intertwined. Functional cohesion: each part necessary for execution of a single function. Cohesion of module considered as highest level of cohesion that is applicable to all elements in the module.",
    "ground_truth": "other"
}