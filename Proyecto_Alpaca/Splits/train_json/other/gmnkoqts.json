{
    "TÃ­tulo": " Lecture notes - Chapter 5 - Integer Arithmetic",
    "Cuerpo": "operations we'll get to know (and love): addition subtraction multiplication division logical operations (not, and, or, nand, nor, xor, xnor) shifting rules: - add magnitudes only (do not carry into the sign bit) - throw away any carry out of the msb of the magnitude - add only integers of like sign ( + to +    or    - to -) - sign of result is same as sign of the addends so it seems that if there is a carry out of the msb, then the result will be off by 1, so add 1 again to get the correct result. rules: - just add all the bits - throw away any carry out of the msb - (same as for unsigned!) or one's complement addition. - when the integers are of the opposite sign, then do a - b    becomes   a + (-b) a + b    becomes   a - (-b) 0 00111 (7)             1 11000 (-24) - 0 11000 (24)          - 1 00010 (-2) --------------          -------------- 1 10110 (-22) do 0 11000 (24) - 0 00111 (7) -------------- 1 10001 (-17) (switch sign since the order of the subtraction was reversed) - so, get the additive inverse of b, and do addition. unsigned -- when there is a carry out of the msb sign magnitude -- when there is a carry out of the msb of the magnitude 1 1000 (-8) + 1 1001 (-9) ----- 1 0001 (-1)  (carry out of msb of magnitude) 2's complement -- when the signs of the addends are the same, and the sign of the result is different unsigned -- never sign magnitude -- never happen when doing subtraction 2's complement -- we never do subtraction, so use the addition rule on the addition operation done. logical left - move bits to the left, same order - throw away the bit that pops off the msb - introduce a 0 into the lsb logical right - move bits to the right, same order - throw away the bit that pops off the lsb - introduce a 0 into the msb arithmetic left - move bits to the left, same order - throw away the bit that pops off the msb - introduce a 0 into the lsb arithmetic right - move bits to the right, same order - throw away the bit that pops off the lsb - reproduce the original msb into the new msb - another way of thinking about it:  shift the bits, and then do sign extension rotate left - move bits to the left, same order - put the bit that pops off the msb into the lsb, so no bits are thrown away or lost. rotate right - move bits to the right, same order - put the bit that pops off the lsb into the msb, so no bits are thrown away or lost. sll   x, y, value     x <- (y), logically left shifted by value bits srl   x, y, value     x <- (y), logically right shifted by value bits sra   x, y, value     x <- (y), arithmetically right shifted by value bits rol   x, y, value     x <- (y), rotated left by value bits ror   x, y, value     x <- (y), rotated right by value bits",
    "ground_truth": "other"
}