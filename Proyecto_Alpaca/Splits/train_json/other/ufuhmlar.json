{
    "TÃ­tulo": "\nGlew on High-Level Editting\n",
    "Cuerpo": "Date: Tue, 05 Nov 1996 00:16:19 GMT Server: NCSA/1.5 Content-type: text/html Last-modified: Thu, 12 Sep 1996 23:37:55 GMT Content-length: 6101 Glew on High-Level Editting Glew on High-Level Editting I have had a long-time interest in higher level editting operations, both for normal programming languages, and for hardware design - HDLs. E.g. the MIT \"Programmer's Apprentice\". This web page will serve as an achor for my own thoughts on the issue, particular for me to record scenarios to which this could apply. I need to edit GNU Emacs' dynamic abbreviations package to provide completion to end of line instead of to end of word. Unfortunately, the package presently has a single variable \"AbbreviationRegexp\" which is using in two different contexts: (1) to dtermine the symbol that you are looking at, and (2) to determine the expansion. Unfortunately, there is no way to do this without creating a complete copy of a call-tree of several dozen functions. This package relies on recursion to provide a context-sensitive number parser that accepts most numeric formats. Each recognizer has only limited knowledge of syntax, but recurses through the top level recognizer to handle variants, thus obtaining modularity and easy extensibility. Therefore, the high level editting operation is in this calling tree, take all instances of the explicitly named operation or value X, and make them refer to a parameter that is passed along all paths the calling tree. Similarly, the reverse operation may occasionally be useful. An interactive query framework would help. It took me more than six (6) hours!!!! It was complicated by the fact that a semantic split of a type needed to be done, and by incomplete type checking of function parameters in the C compiler I was using, but this emphasizes the point: something that was asa simple to describe as above took an excessively long time, because of the attention to detail that could be automated. Hidden Recursive Parameters A more specific example of this arose because I wanted to pass \"hidden state\" that is only useful to one of the lower functions in the calling tree. It is not appropriate to make this extra info an explicit parameter, because the information is only of interest to the upper level function that set it up, and the lower level function that receives it. A typical naive solution is to do this with a global variable, but that is not MP  safe. Again, the \"best\" solution is to pass the hidden information as a parameter through all the intermediate levels. But, in addition to creating the parameter, we also need to create the data types that can hide what is being passed. Furthermore, because it is quite likely that there will need to be multiple, different, such instances of communication, it is desirable to create a generic \"data hiding mechanism: or \"call-tree message passing mechanism\" that can handle several such messages transparently. The high level routine might do something like this call generic-call-tree placing message to specialized-subfunction-variety while the receiver might do if I need extra info not in standard call parameters scan CallingTreeMessageList to see  if it is there $Header: /u/g/l/glew/public/html/RCS/high-level-editting.html,v 1.2 1995/12/31 07:54:17 glew Exp $",
    "ground_truth": "other"
}