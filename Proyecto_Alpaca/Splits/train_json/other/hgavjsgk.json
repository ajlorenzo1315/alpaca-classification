{
    "TÃ­tulo": "CSE567 Homework Assignment #5",
    "Cuerpo": "Then meet together and formulate solutions to each if you can, and assign the writeup to one or more team members. For problems involving Verilog code, hand in your code and your simulation log (or at least part of it if it's really long). Design your circuits using Verilog and use the simulator to show that it works. The memories you should use are simple static RAMs with an 8-bit address, an 8-bit data input for writes, an 8-bit data output for reads and a single R/W control signal which is asserted high when reading and asserted low for writing. You should write a Verilog model for this memory. If R/W is asserted (read) then the data output should be what the address selects. If R/W is unasserted (write), then nothing happens until R/W changes to high again, at which time the data on the input is written into the memory. In this problem, you will design and test a simple cache controller using Verilog simulation. (Only one of Read/Write can be asserted at once) Address - Processor provides the memory address of word being read or written. Hit - The cache tag memory asserts Hit if the memory address is in the cache. Only one of MemRead and MemWrite can be asserted at a time. On each cycle, the processor asserts a read or write request (or neither) to the cache controller along with the memory address of a word. It then waits for the Ready signal to be asserted. (You do not have to design the cache tag module - assume it's there and the Hit signal is asserted appropriately.) Different things happen depending on whether a Read or Write has been asserted: Read - If Hit is asserted, then Ready should be asserted immediately (same clock cycle as Hit). If Hit is not asserted, the controller must read the cache line from memory, starting with the requested word. That is, the controller issues MemRead with the address of the first word to be accessed, waits 4 cycles and then issues 3 more reads, one per cycle with the addresses of the remaining words in the cache line. Whether or not Hit is asserted, the controller issues a write to memory for one word. If a read miss or a write is followed by a read hit, however, Ready can be asserted right away since no memory access is required. Write a Verilog description for this cache controller and use Verilog-XL to test your design.",
    "ground_truth": "other"
}