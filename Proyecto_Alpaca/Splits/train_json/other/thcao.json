{
    "TÃ­tulo": " Lecture notes - Chapter 14 - Architectures",
    "Cuerpo": "VLSI  (late 1970s - today) >10,000 transistors space requirement:  a chip, or chip set, board Examples: So, do more than one instruction at a time: - released in the late 1970's - an early \"processor on a chip\" - a lot of its limitations have to do with what could fit on a VLSI chip in the late 1970's Just remember: if something seems out of place to you, or some functionality of a computer that you think is essential and was not included in the Cray 1, it wasn't necessary! instruction set fixed length instructions either 16 or 32 bit (no variablility that depends on the number of operands) number of operands possible for an instruction 0-3 number and kind of instructions op codes are 7 bits long -- giving 128 instrucitons This includes complete integer and floating point instructions. A word on the Cray 1 is 64 bits. All instructions operate on a single size of data -- Either a 64 bit word, or on an address (24 bits). They are used for all sorts of data, but not addresses. Each set has 64 64-bit registers! A single instruction that uses a vector register (1 set) will cause something to happen to each of the 64 registers within that set. There's so many registers that there isn't really a need for one. Down time on a Cray is very expensive due to the way they are expected to be used. character string (consecutive bytes in memory, specified always by a starting address and the length in bytes) numeric string  (the ASCII codes that represent an integer) packed decimal string (consecutive sequence of bytes in memory that represent a BCD integer. the location of operands is definitely not fixed, they can be in memory, or registers, and the variety of addressing modes that specify the location of an operand is large! This is a VERY simple use of addressing modes. for example addl3 (R3), R4, R2 uses Register Direct addressing mode for the first operand -- operation the address of the first operand is in R3, load the operand at the address, add to the contents of R4, and place the result into R2 The addressing mode for each operand can (an often is) be different! Each instruction has an 8-bit opcode. There will be 1 8-bit operand specifier for each operand that the instruction specifies. Because of the large number and variety of addressing modes, an operand specification can be much more than 1 byte.",
    "ground_truth": "other"
}