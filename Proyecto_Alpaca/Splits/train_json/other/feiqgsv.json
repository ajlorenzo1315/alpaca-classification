{
    "TÃ­tulo": "Common C++ Programming Errors",
    "Cuerpo": "These common errors are ordered into the following categories: C++ Basics Control Structures Basic Data Structures Functions C++ Basics case isn't CASE isn't CaSe C++ is case sensitive! Since this is now supported, it is preferred to use this type rather than an enumerated boolean type as shown in the text or the integers 0 and 1. For a simple example see bool.cc . If you use an enumerated type or #include <boolean.h> as shown in the text you may get a compiler warning message that can be ignored. {   int i; cout << i; { int j;           // j's scope limited to inner code block cout << i << j; }                   // j falls out of scope here cout << i << j;     // ERROR! if ( 's' == \"s\" ) Control Structures if only == where = but they are not equal Probably the most common error is using = (assignment op) rather than == (equality op). && and || are \"and\" and \"or\" but not & and | Like equality comparisons, logical \"and\" and logical \"or\" must use the appropriate symbol doubled with no space between. if ( 33 > 22 > 11 )    // should be: (33 > 22) && (22 > 11) if ( 11 == 11 == 11 )  // should be: (11 == 11) && (11 == 11) compounding the problem Only a single statement follows as the body of most control structures unless you compound the statements using a statement block. It is a good practice to even put a break after the last case. switch ( menu_choice ) { case 'a':           // intentional flow through to next case case 'A': add( item );     // accidental flow through to next case case 'd':           // intentional flow through to next case case 'D': delete( item ); break;           // good practice } the bodyless loop A misplaced semicolon can behead a loop. for ( i = 0; i < MAX; i++ );   // <- see the extra semicolon? int i, j; for (i=1, j=-1; i<11; i++, j--) cout << i << j;       // <- counter used in loop body cout << endl << i << ',' << j << endl; // <- and outside Loop counters that are used only inside of the loop body can be defined in the for loop in the manner shown below. // defines TWO local counters m,n that are used only inside loop for (int m=1, n=-1; m<11; m++, n--) cout << m << n; Using the old style of defining two loop counters may give syntax errors and should be avoided. The example below creates a array with 11 elements with the first at index 0 and the last at index 10. int a[11]; a[0]  =  121; a[11] = 1331;     // ERROR! a[i,j] is like being out of your element Elements of multidimensional arrays are accessed by a[i][j] . This means a[i,j] is the same as a[j] , which does not access the element of the two dimensional array as you intended. classes end in a semicolon Don't forget to end your class definitions with a semicolon! If there is a mismatch you may get a syntax error from the compiler or an undefined symbol error from the linker. no arguing about parentheses Even when a function takes no arguments, you must still include the ( ) s when calling the function, as well as in the prototype and the function header. The example below shows this: void display(); int main() { display;      // OOPS!",
    "ground_truth": "other"
}