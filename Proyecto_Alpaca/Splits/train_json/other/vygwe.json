{
    "TÃ­tulo": "Regular Language to SQL Query Translation",
    "Cuerpo": "A \"middleware\" mechanism that converts a natural language question into the backend database language to perform the user's query request might do the job. Identifying Target Domain Natural language processing is a difficult subject. The domain of querying for flight schedules is thus chosen. Using sample schedule information from USAir's flight schedule database, the following relational database table definition and record shows the type of information that is dealt with. FLTS( toCity, fromCity, beginDate, endDate, leaveTime, arriveTime, flightNum, frequency, stops, stopCities, meals, fare ) ( \"San Francisco, CA\", Ithaca, NY\", \"052396\", \"062296\", \"635A\", \"1159A\", \"E5361/63\", \"X7\", 1, \"PHL\", \"B\", 524 ) With the domain specified, certain assumptions are made to simplify the task of natural language question to SQL construct translation: Focus on simple queries :  user's usually do not ask complex SQL queries that involve not exists or groupings for instance Time and dates : these need special treatment because of the variety and complexity of formats used Query against one database table only : dealing with multiple tables is a complex task because of ambiguity resolution difficulties with table joins Punctuations : not dealt with One sentence questions only Techniques Researched Several possible concepts/techniques to tackle the problem were looked at: WH-, GAP, and semantic features; Bottom-up chart-parsing with semantic features; Procedural semantics and question answering, conversational agents; Information retrieval concepts; and Template matching. The idea of using some combination of question answering, conversational agents, information retrieval concepts, and template matching came about from the realization that the number of synonyms and phrasings possible for asking for a flight schedule is actually quite diverse, requiring a rather large lexicon for a small domain. -->Table of Contents Results and Evaluation Bottom-Up Chart-Parsing with Semantic Features Because of the nice structured format of SQL queries, flight schedule questions can be directly mapped to that of parts of SQL queries. Translation Mapping for the Sentence What flights are available for San Francisco from Ithaca for May 28? Sentence SQL What flights are available SELECT flights FROM schedules for San Francisco WHERE destCity = \"San Francisco\" AND from Ithaca departCity = \"Ithaca\" AND for May 28 departDate = \"0528\" The following is the result from parsing the sentence \"What are the departure times for houston tomorrow\": S176:<S((( SELECT ((( TIME ?V18) ?V25 DEPART ) What is the cheapest flight available to San Francisco tomorrow? Question Answering + Conversational Agents + Information Retrieval + Template Matching The results of the bottom-up chart-parsing method could be improved with further refinement as non-anticipated sentential constructs are discovered. This is not ideal, however, which motivates the search for other means of tackling the problem. This requires the flight schedule answering system to be aware of what has been asked in a session, then results can be further refined by the user with several questions. For example, \"flight\", \"flight schedule\", \"schedule\", \"reservation\" refer to the same thing; other inferences are possible through other combinations of words with helper words and different word arrangements. The sentences I need to fly to San Francisco tomorrow. and the sentence Is there any flight available to San Francisco tomorrow? Notice, however, that key phrases are the same: to San Francisco , tomorrow , and any flight . Interface of Flight Schedule Query Application To test the idea out, a Tcl/TK application has been written (Fig. In terms of the bottom-up chart-parser method, if a lexicon that deals with all possible flight schedule scenarios is used; dates, times, and flight numbers are given special identification parameters; city names with multiple words are given special treatment; and grammar rules are refined by repeated testing; then a full-proof flight-schedule query system could be possible. [2] Almasi, G., et al.  \"Web* -- A Technology to Make Information Available on the Web.\"",
    "ground_truth": "other"
}