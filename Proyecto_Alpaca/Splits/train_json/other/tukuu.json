{
    "TÃ­tulo": "Forefronts Teaching Computer Graphics with DX article",
    "Cuerpo": "Teaching Computer Graphics and Scientific Visualization using the Dataflow Block Diagram Language DataExplorer by Bruce Land, Visualization Project Leader, Cornell Theory Center Abstract The scientific visualization language DataExplorer (DX) from IBM has been found to be useful in undergraduate education as a vehicle for teaching computer graphics at an introductory level. Although it is designed for scientific data visualization, DX can be used to construct student lab exercises in computer graphics. The course covers the following topics: Construction of surfaces by explicit polygon lists, by parametric operations, and by hierarchical grouping of simple objects to form complex surfaces Modification of objects by 3D geometric transforms in order to position them in space and animate them Viewing of a group of objects including clipping to a window and perspective or parallel projection into a 2D screen space Rendering of polygonal and parametric surfaces by hidden surface removal, shading/lighting, by anti-aliasing, as well as by surface property modifications such as texture- or bump-mapping Use of global illumination models to render interactions between surfaces Modeling of scientific data for scientific visualization. These exercises include: construction of polyhedra from vertex and face descriptions; construction of parametric surfaces including quadric surfaces (e.g. ellipsoids), figures of rotation, and tensor-product surfaces (e.g. bilinear); hierarchical modeling and animation of complex objects; writing perspective viewing transforms; comparing lighting techniques with wire frame, flat shaded, or Gouraud shaded objects illuminated with ambient and point illumination; producing variations on the standard Phong lighting model, including spotlights and bump mapping of surfaces; image techniques including production of texture mapped surfaces, image filtering and anti-aliasing; visualization of a 2D scalar field (heights of a landscape) and a 3D vector field (a flow field); and a design project to produce animation based on all the techniques learned. The first two exercises deal with construction of objects and are an introduction to DX. The second exercise introduces parametric surfaces. When done correctly, the exercise shows them how to design parts of a complicated object (e.g. props or wheels), move them, and duplicate them for re-use several times in the final construction. Then they turn off the default lighting model in DX (Phong illumination with Gouraud shading) and design their own lighting. Students are asked to anti-alias a simple scene using postfiltering and to determine a \"best\" scheme based on available filters and system resource (i.e. memory, CPU time). Finally they texture-map an image onto a quadric surface by parametrically modifying the image pixel coordinates. The final design project is to produce an animation of hierarchically modeled objects. DX as a Programming Language At the introductory level, lack of programming tools often interferes with learning graphics operations. Typically, graphical operations are either provided as a large library of routines that students must learn, or derive from relatively simple programming projects that students must code from scratch. The structure of DX that allows such easy interaction is described next. The block diagram program is built up of \"modules\" and \"wires\" connecting them. They are expected to produce working programs that are readable and documented. In many cases a small code block can be made into a macro, which then appears to be another module with a user-chosen name. Conclusions DX allows students to concentrate on learning the graphics content of the course rather than investigating the details of a programming environment. At the time of writing, course evaluations are not yet available from students, but will be when this article appears in Forefronts. Designing complex scenes in DX is easy enough that many projects put a large demand on the workstations for CPU and memory.",
    "ground_truth": "other"
}