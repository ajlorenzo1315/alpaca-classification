{
    "TÃ­tulo": "Research Summary of Shun-Tak A. Leung",
    "Cuerpo": "It shows how array restructuring can be applied automatically and efficiently to a wide class of applications. Array restructuring is an approach to enhancing the locality of array accesses in loops. As a trivial example, if a two-dimensional array is accessed by rows, the compiler may decide to store it in row-major order, whereas if it is accessed by columns, the compiler would choose column-major storage. My research in array restructuring is motivated in part by the observation that array restructuring in many ways complements loop restructuring --- an alternative approach that changes the execution order of loop iterations rather than the storage order of array elements --- but has received much less attention. My research shows how array restructuring can be applied automatically and efficiently to a wide class of programs. In this framework, an array to be restructured (the \"original array\") is replaced by another array (the \"restructured array\") that contains the same elements but in a different order. In other words, instead of using an index vector to find an element in the original array, we apply a linear transformation to that vector and use the result to find the corresponding element in the restructured array. It may appear that the extra transformation imposes a significant overhead, but in fact this is not the case, for the following reason. My algorithms solve these problems with simple linear algebraic techniques in the common case where the array indices are linear functions of loop variables. These algorithms have also been adapted to deal with more general access patterns as well. Third, elements of the restructured array have to be laid out in memory in such a way that each element can be efficiently located given its indices. The experiments were designed to study how array restructuring affects performance for a range of problem sizes as well as how it compares and interacts with various loop restructuring techniques. Results for IBM RS/6000 were similar. Moreover, in several cases where false sharing had existed, array restructuring removed this performance bottleneck, producing performance benefits that increased with the number of processors. Experiments also showed that in both applicability and performance, array restructuring techniques complemented many common loop restructuring techniques, including those performed by a production quality optimizing compiler from SGI. More can be found in a technical report . At run time, the inspector computes a parallel schedule of the iterations based on dependence information not available at compile time. The executor performs the iterations in parallel using this schedule. My research in runtime parallelization has touched on both the inspector and the executor. I have proposed and experimentally evaluated two simple techniques to address these problems by restructuring arrays according to the parallel execution schedule.",
    "ground_truth": "other"
}