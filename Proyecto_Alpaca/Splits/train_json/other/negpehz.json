{
    "TÃ­tulo": "Image Transformations",
    "Cuerpo": "IMPORTANT NOTE: In this programming environment, the lower-lefthand corner of an image corresponds to pixel coordinates (0,0), and the upper-righthand corner of an image corresponds to pixel coordinates (n-1,m-1) where n is the width and m is the height of the image. To translate an image by dx and dy , we compute the pixel value P(x,y) in the destination image by finding the pixel value P'(x', y') in the source image where x' and y' are defined as follows. x' = x + dx y' = y + dy The line of code used in XLISP-STAT to perform this transformation on a source image source1 is (xform '(source1 (+ x dx ) (+ y dy ))) where dx and dy are the translation amounts in the x and y dimensions, respectively. Also, notice that dx and dy can be negative values. The following example translation moves the image 20 units to the right on the x axis and 30 units down the y axis. (xform '(source1 (+ x -20) (+ y 30))) Scaling We scale an image by taking each pixels original coordinates and multiplying them by a scaling factor. To scale an image by sx and sy , we compute the pixel value P(x,y) in the destination image by finding the pixel value P'(x', y') in the source image where x' and y' are defined as follows. x' = x * sx y' = y * sy The line of code used in XLISP-STAT to perform this transformation on a source image source1 is (xform '(source1 (* x sx ) (* y sy ))) where sx and sy are the scaling factors in the x and y dimensions, respectively. The following illustrates a scaling transformation that stretches the image along the x axis (by a factor of 2) and shrinks the image along the y axis (by a factor of .5). (xform '(source1 (* x .5) (* y 2))) Rotation To rotate an image by some angle theta (in radians), we compute the pixel value P(x,y) in the destination image by finding the pixel value P'(x', y') in the source image where x' and y' are defined as follows. x' = (x * cos theta ) - (y * sin theta ) y' = (x * sin theta ) + (y * cos theta ) The line of code used in XLISP-STAT to perform this transformation on a source image source1 is (xform '(source1 (- (* x costheta) (* y sintheta)) (+ (* x sintheta) (* y costheta)))) Before entering this line of code, it is necessary to define sintheta and costheta. This can be accomplished with the following 2 lines of code. (setq costheta (cos (/ (* (* theta 2) 3.14) 360))) (setq sintheta (sin (/ (* (* theta 2) 3.14) 360))) The following illustrates a rotation transformation that rotates the image 30 degrees from the y axis (clockwise). More specifically, it allows you to perform a translation, a scaling, and a rotation on a single image in the specified order. (trans_scale_rot transX transY scaleX scaleY rotTheta) The following line of code illustrates the application of this function to an image. The image is first translated 50 units right on the x axis and 50 units up on the y axis. It is then scaled by a factor of .5 in the x and y direction (shrinking the image to 1/4 its original size). Try using different parameters to the function, and see how they change the resulting images. You may wish to switch roles as the game progresses, and find some way of scoring how close the guesser gets to the actual transformations the coder entered. The first operation performed was a translation along the x axis by 3 units, and the second operation was a rotation by 90 degrees.",
    "ground_truth": "other"
}