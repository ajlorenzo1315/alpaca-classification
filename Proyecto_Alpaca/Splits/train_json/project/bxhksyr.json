{
    "TÃ­tulo": "  Formal Methods in System Design and Verification ",
    "Cuerpo": "Date: Wed, 20 Nov 1996 20:12:34 GMT Server: Apache/1.1.1+ Content-type: text/html Content-length: 5354 Last-modified: Wed, 25 Sep 1996 22:37:47 GMT Formal Methods in System Design and Verification University of Utah Department of Computer Science The Utah Verifier (UV) Project: Formal Methods in System Design and Verification The UV Cartoon Synopsis The process of designing modern digital hardware systems (e.g. multiprocessors) is quite challenging in many ways, especially in terms of correctness problems that must be solved. Projects in this area last several years with large group sizes, and constantly face changing requirements, personnel turnover, as well as newly unearthed (and often unanticipated) facts. Applying today's verification tools to verify entire systems of this nature requires inordinate amounts of human effort as well as computer resources. Our ideas are being developed in the context of real systems projects such as Avalanche . Specific activities to date include efficient explicit enumeration methods based on new partial-order reduction methods, and model checking of non-trivial industrial bus specifications. The UV System Block Diagram PV: A Protocol Verifier PV will accept descriptions in an extended subset of the PROtocol ModEling LAnguage (Promela) with key extensions in the area of incorporating abstract data types and uninterpreted functions. It will employ efficient on-the-fly explicit enumeration algorithms. A unique feature of PV will be its support for refining high-level protocol descriptions that assume infinitely sized communication buffers to those that use finite- (and/or shared) buffers. CV: A Cycle-level Verifier CV will accept descriptions in an extended subset of Verilog, with key extensions in the area of incorporating abstract data types. It will perform implicit enumeration efficiently, using recently developed graph representations of logic functions such as Multiway Decision Graphs (Corella et. CV will also support many pragmatically motivated features including a facility to accept test vectors from PV for cross-validating the PV and CV models. The verification conditions to be established by SV through symbolic simulation will be derived from the very same descriptions provided to the CV tool. The core of DB will be based on the PVS verification system from SRI. The expressive power of the PVS theory description language will permit design requirements to be captured at a high level of abstraction, and also permit future extensions to exploit PVS's full power. It will also permit the state transition relation in PV and CV to be translated into PVS to prove key system properties. DB will also have facilities to translate assertions in its design requirements-base into assertions to be verified by the PV (mainly for protocol) and CV (mainly for data-layout and cycle-level details) tools, to ensure consistency between the models. A valuable aspect of this organization is that it will permit regression verification runs after design changes. Benchmark Examples Benchmark examples cutting across several hierarchical levels of abstraction will be released. Further Details Prospective graduate students and post-doctoral fellows are encouraged to contact ganesh@cs.utah.edu . Faculty Ganesh Gopalakrishnan Alan Davis Students Ratan Nalumasu Ravi Hosabettu",
    "ground_truth": "project"
}